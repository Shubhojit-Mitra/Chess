"use strict";
function log() {
    console.log('log');
}
exports.log = log;
function createMap(arr) {
    return arr.reduce(function (result, key) {
        result[key] = true;
        return result;
    }, {});
}
exports.createMap = createMap;
function createMapByKey(arr, getKey) {
    var result = {};
    arr.forEach(function (item) {
        var key = getKey(item);
        result[key] = result[key] ? result[key].concat(item) : [item];
    });
    return result;
}
exports.createMapByKey = createMapByKey;
function distinct(arr) {
    var map = createMap(arr);
    return Object.keys(map);
}
exports.distinct = distinct;
var now = function () { return new Date().getTime(); };
function debounce(func, milliseconds, immediate) {
    if (immediate === void 0) { immediate = false; }
    var timeout, args, context, timestamp, result;
    var wait = milliseconds;
    var later = function () {
        var last = now() - timestamp;
        if (last < wait && last > 0) {
            timeout = setTimeout(later, wait - last);
        }
        else {
            timeout = null;
            if (!immediate) {
                result = func.apply(context, args);
                if (!timeout)
                    context = args = null;
            }
        }
    };
    return function () {
        context = this;
        args = arguments;
        timestamp = now();
        var callNow = immediate && !timeout;
        if (!timeout)
            timeout = setTimeout(later, wait);
        if (callNow) {
            result = func.apply(context, args);
            context = args = null;
        }
        return result;
    };
}
exports.debounce = debounce;
;
function throttle(func, milliseconds, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options)
        options = {};
    var gnow = now;
    var later = function () {
        previous = options.leading === false ? 0 : gnow();
        timeout = null;
        result = func.apply(context, args);
        if (!timeout)
            context = args = null;
    };
    return function () {
        var now = gnow();
        if (!previous && options.leading === false)
            previous = now;
        var remaining = milliseconds - (now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0 || remaining > milliseconds) {
            if (timeout) {
                clearTimeout(timeout);
                timeout = null;
            }
            previous = now;
            result = func.apply(context, args);
            if (!timeout)
                context = args = null;
        }
        else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
        }
        return result;
    };
}
exports.throttle = throttle;
;
function once(func) {
    var ran = false;
    var memo = undefined;
    return function () {
        if (ran)
            return memo;
        ran = true;
        memo = func.apply(this, arguments);
        func = null;
        return memo;
    };
}
exports.once = once;
function rangeLimited(args) {
    var num = args.num, min = args.min, max = args.max, loopAround = args.loopAround;
    var limited = Math.max(Math.min(num, max), min);
    if (loopAround && limited > num) {
        return max;
    }
    if (loopAround && limited < num) {
        return min;
    }
    return limited;
}
exports.rangeLimited = rangeLimited;
function isTsFile(filePath) {
    var ext = getExt(filePath);
    return ext == 'ts' || ext == 'tsx';
}
exports.isTsFile = isTsFile;
function getExt(filePath) {
    var parts = filePath.split('.');
    return parts[parts.length - 1].toLowerCase();
}
exports.getExt = getExt;
function getFileName(fullFilePath) {
    var parts = fullFilePath.split('/');
    return parts[parts.length - 1];
}
exports.getFileName = getFileName;
function getDirectory(filePath) {
    var directory = filePath.substring(0, filePath.lastIndexOf("/"));
    return directory;
}
exports.getDirectory = getDirectory;
function getDirectoryAndFileName(filePath) {
    var directoryPath = getDirectory(filePath);
    var directoryName = getFileName(directoryPath);
    var fileName = getFileName(filePath);
    return directoryName + "/" + fileName;
}
exports.getDirectoryAndFileName = getDirectoryAndFileName;
function arraysEqual(a, b) {
    if (a === b)
        return true;
    if (a == null || b == null)
        return false;
    if (a.length !== b.length)
        return false;
    for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
            return false;
    }
    return true;
}
exports.arraysEqual = arraysEqual;
function createId() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}
exports.createId = createId;
exports.createGuid = createId;
function selectMany(arr) {
    var result = [];
    for (var i = 0; i < arr.length; i++) {
        for (var j = 0; j < arr[i].length; j++) {
            result.push(arr[i][j]);
        }
    }
    return result;
}
exports.selectMany = selectMany;
function makeBlandError(filePath, error) {
    return {
        filePath: filePath,
        from: {
            line: 0,
            ch: 0
        },
        to: {
            line: 0,
            ch: 0
        },
        message: error,
        preview: null
    };
}
exports.makeBlandError = makeBlandError;
function getFilePathFromUrl(url) {
    var filePath = getFilePathAndProtocolFromUrl(url).filePath;
    return filePath;
}
exports.getFilePathFromUrl = getFilePathFromUrl;
function getFilePathAndProtocolFromUrl(url) {
    var protocol = url.substr(0, url.indexOf('://'));
    var filePath = url.substr((protocol + '://').length);
    return { protocol: protocol, filePath: filePath };
}
exports.getFilePathAndProtocolFromUrl = getFilePathAndProtocolFromUrl;
function getUrlFromFilePathAndProtocol(config) {
    return config.protocol + '://' + config.filePath;
}
exports.getUrlFromFilePathAndProtocol = getUrlFromFilePathAndProtocol;
exports.resolve = Promise.resolve.bind(Promise);
var punctuations = createMap([';', '{', '}', '(', ')', '.', ':', '<', '>', "'", '"']);
exports.prefixEndsInPunctuation = function (prefix) { return prefix.length && prefix.trim().length && punctuations[prefix.trim()[prefix.trim().length - 1]]; };
function stringEnum(x) {
    Object.keys(x).map(function (key) { return x[key] = key; });
}
exports.stringEnum = stringEnum;
function intercepted(config) {
    return function () {
        config.intercept.apply(null, arguments);
        return config.orig.apply(config.context, arguments);
    };
}
exports.intercepted = intercepted;
