"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var socketLib_1 = require("./socketLib");
var socketIo = io;
var origin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port : '');
exports.resolve = Promise.resolve.bind(Promise);
function run(config) {
    var client = new Client(config.clientImplementation);
    var server = client.sendAllToSocket(config.serverContract);
    var cast = client.setupAllCast(config.cast);
    var pendingRequestsChanged = new socketLib_1.TypedEvent();
    client.pendingRequestsChanged = function (pending) { return pendingRequestsChanged.emit({ pending: pending }); };
    return { client: client, server: server, cast: cast, pendingRequestsChanged: pendingRequestsChanged, connectionStatusChanged: client.connectionStatusChanged };
}
exports.run = run;
var Client = (function (_super) {
    __extends(Client, _super);
    function Client(clientImplementation) {
        var _this = this;
        _super.call(this);
        this.getSocket = function () { return _this.socket; };
        this.connectionStatusChanged = new socketLib_1.TypedEvent();
        this.typedEvents = {};
        this.socket = io.connect(origin);
        this.registerAllFunctionsExportedFromAsResponders(clientImplementation);
        this.startListening();
        this.socket.on(socketLib_1.anycastMessageName, function (msg) {
            _this.typedEvents[msg.message].emit(msg.data);
        });
        var connected = false;
        setInterval(function () {
            var newConnected = _this.socket.connected;
            if (newConnected != connected) {
                connected = newConnected;
                _this.connectionStatusChanged.emit({ connected: connected });
            }
        }, 2000);
    }
    Client.prototype.setupAllCast = function (instance) {
        var _this = this;
        Object.keys(instance).forEach(function (name) {
            _this.typedEvents[name] = instance[name];
        });
        return instance;
    };
    return Client;
})(socketLib_1.RequesterResponder);
exports.Client = Client;
