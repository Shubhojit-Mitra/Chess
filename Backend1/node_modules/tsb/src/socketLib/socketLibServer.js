"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var socketIo = require('socket.io');
var socketLib_1 = require("./socketLib");
exports.resolve = Promise.resolve.bind(Promise);
function run(config) {
    var server = new Server(config.app, config.serverImplementation, function (serverInstance) {
        return serverInstance.sendAllToSocket(config.clientContract);
    });
    var cast = server.setupAllCast(config.cast);
    return { server: server, cast: cast };
}
exports.run = run;
var Server = (function () {
    function Server(app, serverImplementation, clientCreator) {
        this.app = app;
        this.io = socketIo(app);
        this.io.on('connection', function (socket) {
            var serverInstance = new ServerInstance(socket, serverImplementation);
            serverInstance.client = clientCreator(serverInstance);
        });
    }
    Server.prototype.setupAllCast = function (instance) {
        var _this = this;
        var toRet = instance;
        Object.keys(toRet).forEach(function (name) {
            toRet[name] = {
                emit: function (data) {
                    var castMessage = {
                        message: name,
                        data: data
                    };
                    _this.io.sockets.emit(socketLib_1.anycastMessageName, castMessage);
                }
            };
        });
        return toRet;
    };
    return Server;
})();
exports.Server = Server;
var ServerInstance = (function (_super) {
    __extends(ServerInstance, _super);
    function ServerInstance(socket, responderModule) {
        var _this = this;
        _super.call(this);
        this.socket = socket;
        this.getSocket = function () { return _this.socket; };
        this.registerAllFunctionsExportedFromAsResponders(responderModule);
        _super.prototype.startListening.call(this);
    }
    return ServerInstance;
})(socketLib_1.RequesterResponder);
exports.ServerInstance = ServerInstance;
