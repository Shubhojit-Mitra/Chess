"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ui = require("../ui");
var React = require("react");
var socketClient_1 = require("../../socket/socketClient");
var utils = require("../../common/utils");
var codeEditor_1 = require("../codemirror/codeEditor");
var Code = (function (_super) {
    __extends(Code, _super);
    function Code(props) {
        var _this = this;
        _super.call(this, props);
        this.focus = function () {
            _this.refs.editor.focus();
        };
        this.save = function () {
            socketClient_1.server.saveFile({ filePath: _this.filePath }).then(function () { _this.props.onSavedChanged(true); });
        };
        this.close = function () {
            socketClient_1.server.closeFile({ filePath: _this.filePath });
        };
        this.gotoPosition = function (position) {
            _this.refs.editor.gotoPosition(position);
        };
        this.search = function (options) {
            _this.refs.editor.search(options);
        };
        this.hideSearch = function () {
            _this.refs.editor.hideSearch();
        };
        this.findNext = function (options) {
            _this.refs.editor.findNext(options);
        };
        this.findPrevious = function (options) {
            _this.refs.editor.findPrevious(options);
        };
        this.replaceNext = function (newText) {
            _this.refs.editor.replaceNext(newText);
        };
        this.replaceAll = function (newText) {
            _this.refs.editor.replaceAll(newText);
        };
        this.filePath = utils.getFilePathFromUrl(props.url);
        this.state = {};
    }
    Code.prototype.componentDidMount = function () {
        var _this = this;
        socketClient_1.server.getFileStatus({ filePath: this.filePath }).then(function (res) {
            _this.props.onSavedChanged(res.saved);
        });
        this.disposible.add(socketClient_1.cast.didStatusChange.on(function (res) {
            if (res.filePath == _this.filePath) {
                _this.props.onSavedChanged(res.saved);
            }
        }));
    };
    Code.prototype.componentWillUnmount = function () {
        this.disposible.dispose();
    };
    Code.prototype.render = function () {
        return (React.createElement(codeEditor_1.CodeEditor, {ref: 'editor', filePath: this.filePath}));
    };
    return Code;
})(ui.BaseComponent);
exports.Code = Code;
