"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ui = require("../ui");
var React = require("react");
var codeTab_1 = require("./codeTab");
var commands = require("../commands/commands");
var utils = require("../../common/utils");
var csx = require('csx');
var utils_1 = require("../../common/utils");
var styles_1 = require("../styles/styles");
var socketClient_1 = require("../../socket/socketClient");
var utils_2 = require("../../common/utils");
var state = require("../state/state");
var react_redux_1 = require("react-redux");
var styles = require("../styles/styles");
var tips_1 = require("./tips");
var icon_1 = require("../icon");
var socketClient_2 = require("../../socket/socketClient");
var AppTabsContainer = (function (_super) {
    __extends(AppTabsContainer, _super);
    function AppTabsContainer(props) {
        var _this = this;
        _super.call(this, props);
        this.closedTabs = [];
        this.sendTabInfoToServer = function () {
            socketClient_1.server.setOpenUITabs({
                openTabs: _this.props.tabs.map(function (t) { return ({
                    url: t.url
                }); })
            });
        };
        this.onTabClicked = function (event, index) {
            if (event.which == 2) {
                _this.closeTab(index);
            }
            else {
                _this.selectTab(index);
            }
        };
        this.onSavedChanged = function (saved, index) {
            state.setTabSaveStatus({ index: index, saved: saved });
        };
        this.focusAndUpdateStuffWeKnowAboutCurrentTab = function () {
            var component = _this.getSelectedComponent();
            if (component) {
                component.focus();
                _this.sendOrClearSearchOnCurrentComponent();
                var url = _this.props.tabs[_this.props.selectedTabIndex].url;
                var filePath = utils.getFilePathFromUrl(url);
                if (filePath) {
                    state.setCurrentFilePath(filePath);
                }
            }
            else {
                state.setCurrentFilePath('');
            }
        };
        this.state = {
            selected: 0,
        };
    }
    AppTabsContainer.prototype.componentWillReceiveProps = function (nextProps) {
        var _this = this;
        setTimeout(function () {
            var comp = _this.getSelectedComponent();
            if (comp) {
                comp.focus();
            }
        });
    };
    AppTabsContainer.prototype.componentDidMount = function () {
        var _this = this;
        exports.appTabsContainer = this;
        commands.nextTab.on(function () {
            var selected = utils_2.rangeLimited({ min: 0, max: _this.props.tabs.length - 1, num: _this.props.selectedTabIndex + 1, loopAround: true });
            _this.selectTab(selected);
        });
        commands.prevTab.on(function () {
            var selected = utils_2.rangeLimited({ min: 0, max: _this.props.tabs.length - 1, num: _this.props.selectedTabIndex - 1, loopAround: true });
            _this.selectTab(selected);
        });
        commands.doOpenFile.on(function (e) {
            var codeTab = {
                id: utils_1.createId(),
                url: "file://" + e.filePath,
                saved: true
            };
            _this.afterComponentDidUpdate(_this.sendTabInfoToServer);
            _this.afterComponentDidUpdate(_this.focusAndUpdateStuffWeKnowAboutCurrentTab);
            if (e.position) {
                _this.afterComponentDidUpdate(function () { return _this.gotoPositionOnSelectedTab(e.position); });
            }
            state.addTabAndSelect(codeTab);
        });
        commands.doOpenOrFocusFile.on(function (e) {
            if (_this.props.tabs.length
                && utils.getFilePathFromUrl(_this.props.tabs[_this.props.selectedTabIndex].url) == e.filePath) {
                if (e.position) {
                    _this.gotoPositionOnSelectedTab(e.position);
                }
                return;
            }
            var openTabIndex = _this.props.tabs.map(function (t) { return utils.getFilePathFromUrl(t.url) == e.filePath; }).indexOf(true);
            if (openTabIndex !== -1) {
                if (e.position) {
                    _this.afterComponentDidUpdate(function () { return _this.gotoPositionOnSelectedTab(e.position); });
                }
                _this.selectTab(openTabIndex);
                return;
            }
            var codeTab = {
                id: utils_1.createId(),
                url: "file://" + e.filePath,
                saved: true
            };
            _this.afterComponentDidUpdate(_this.sendTabInfoToServer);
            _this.afterComponentDidUpdate(_this.focusAndUpdateStuffWeKnowAboutCurrentTab);
            if (e.position) {
                _this.afterComponentDidUpdate(function () {
                    return setTimeout(function () { return _this.gotoPositionOnSelectedTab(e.position); });
                });
            }
            state.addTabAndSelect(codeTab);
        });
        commands.doOpenOrFocusTab.on(function (e) {
            if (_this.props.tabs.length
                && _this.props.tabs[_this.props.selectedTabIndex].id == e.tabId) {
                if (e.position) {
                    _this.gotoPositionOnSelectedTab(e.position);
                }
                return;
            }
            var openTabIndex = _this.props.tabs.map(function (t) { return t.id == e.tabId; }).indexOf(true);
            if (openTabIndex !== -1) {
                if (e.position) {
                    _this.afterComponentDidUpdate(function () { return _this.gotoPositionOnSelectedTab(e.position); });
                }
                _this.selectTab(openTabIndex);
                return;
            }
            var codeTab = {
                id: e.tabId,
                url: e.tabUrl,
                saved: true
            };
            _this.afterComponentDidUpdate(_this.sendTabInfoToServer);
            _this.afterComponentDidUpdate(_this.focusAndUpdateStuffWeKnowAboutCurrentTab);
            if (e.position) {
                _this.afterComponentDidUpdate(function () {
                    return setTimeout(function () { return _this.gotoPositionOnSelectedTab(e.position); });
                });
            }
            state.addTabAndSelect(codeTab);
        });
        commands.closeTab.on(function (e) {
            _this.closeTab(_this.props.selectedTabIndex);
        });
        commands.closeOtherTabs.on(function (e) {
            var tabs = _this.props.tabs.filter(function (t, i) { return i == _this.props.selectedTabIndex; });
            _this.afterComponentDidUpdate(_this.sendTabInfoToServer);
            _this.afterComponentDidUpdate(_this.focusAndUpdateStuffWeKnowAboutCurrentTab);
            state.setTabs(tabs);
            _this.selectTab(0);
        });
        commands.saveTab.on(function (e) {
            var component = _this.getSelectedComponent();
            if (component) {
                component.save();
            }
        });
        commands.esc.on(function () {
            var component = _this.getSelectedComponent();
            if (component) {
                component.focus();
            }
        });
        commands.findNext.on(function () {
            var component = _this.getSelectedComponent();
            if (component) {
                var findOptions = state.getState().findOptions;
                component.findNext(findOptions);
            }
        });
        commands.findPrevious.on(function () {
            var component = _this.getSelectedComponent();
            if (component) {
                var findOptions = state.getState().findOptions;
                component.findPrevious(findOptions);
            }
        });
        commands.replaceNext.on(function (e) {
            var component = _this.getSelectedComponent();
            if (component) {
                component.replaceNext(e.newText);
            }
        });
        commands.replaceAll.on(function (e) {
            var component = _this.getSelectedComponent();
            if (component) {
                component.replaceAll(e.newText);
            }
        });
        this.disposible.add(state.subscribeSub(function (state) { return state.findOptions; }, function (findQuery) {
            _this.sendOrClearSearchOnCurrentComponent();
        }));
        var loadActiveProjectFiles = function () {
            socketClient_1.server.getFilePathsInActiveProject({}).then(function (res) {
                state.setFilePathsInActiveProject(res.filePaths);
            });
        };
        loadActiveProjectFiles();
        socketClient_1.server.getActiveProjectConfigDetails({}).then(function (res) {
            state.setActiveProject(res);
        });
        socketClient_2.cast.activeProjectConfigDetailsUpdated.on(function (res) {
            state.setActiveProject(res);
            loadActiveProjectFiles();
        });
        commands.openFileFromDisk.on(function () {
            ui.comingSoon("Open a file from the server disk");
        });
        commands.undoCloseTab.on(function () {
            if (_this.closedTabs.length) {
                var tab_1 = _this.closedTabs.pop();
                state.addTabAndSelect(tab_1);
                _this.selectTab(_this.props.tabs.length - 1);
                _this.afterComponentDidUpdate(_this.sendTabInfoToServer);
            }
        });
        var gotoIndex = function (index) { return _this.props.tabs[index] && _this.selectTab(index); };
        commands.gotoTab1.on(function () { return gotoIndex(0); });
        commands.gotoTab2.on(function () { return gotoIndex(1); });
        commands.gotoTab3.on(function () { return gotoIndex(2); });
        commands.gotoTab4.on(function () { return gotoIndex(3); });
        commands.gotoTab5.on(function () { return gotoIndex(4); });
        commands.gotoTab6.on(function () { return gotoIndex(5); });
        commands.gotoTab7.on(function () { return gotoIndex(6); });
        commands.gotoTab8.on(function () { return gotoIndex(7); });
        commands.gotoTab9.on(function () { return gotoIndex(8); });
        socketClient_1.server.getOpenUITabs({}).then(function (res) {
            if (!res.openTabs.length)
                return;
            var openTabs = res.openTabs;
            var tabInstances = openTabs.map(function (t) {
                return {
                    id: utils_1.createId(),
                    url: t.url,
                    saved: true
                };
            });
            state.addTabs(tabInstances);
            state.selectTab(_this.props.tabs.length - 1);
            _this.focusAndUpdateStuffWeKnowAboutCurrentTab();
        });
    };
    AppTabsContainer.prototype.render = function () {
        var _this = this;
        var selectedIndex = this.props.selectedTabIndex;
        var titles = this.props.tabs.map(function (t, i) {
            var title = utils.getFileName(t.url);
            var style = [styles_1.tabHeader, i == selectedIndex ? styles_1.tabHeaderActive : {}];
            var handleTitleClose = function (event) {
                _this.closeTab(i);
                event.stopPropagation();
            };
            var titleCloseStyle = { width: '1rem', textAlign: 'center', marginLeft: '.2rem', ":hover": { color: styles.errorColor } };
            var titleIcon;
            if (!t.saved) {
                style.push(styles_1.tabHeaderUnsaved);
                titleIcon = React.createElement(icon_1.Icon, {style: titleCloseStyle, name: "life-ring", onClick: handleTitleClose});
            }
            else {
                titleIcon = React.createElement(icon_1.Icon, {style: titleCloseStyle, name: "times", onClick: handleTitleClose});
            }
            return React.createElement("span", {key: "tabHeader " + i, style: style, onClick: function (event) { return _this.onTabClicked(event.nativeEvent, i); }}, React.createElement("span", {key: "tabHeaderTitle " + i}, title), " ", titleIcon);
        });
        var rederedTabs = this.props.tabs.map(function (t, i) {
            var isSelected = selectedIndex == i;
            var style = (isSelected ? {} : { display: 'none' });
            var Component = getComponentByUrl(t.url);
            return React.createElement("div", {className: "app-tabs-container-component-div", key: t.id, style: [csx.flex, csx.flexRoot, style]}, React.createElement(Component, {ref: t.id, url: t.url, onSavedChanged: function (saved) { _this.onSavedChanged(saved, i); }}));
        });
        return (React.createElement("div", {style: [csx.vertical, csx.flex], className: "app-tabs"}, React.createElement("div", {style: [csx.horizontal, styles_1.tabHeaderContainer], className: "app-tabs-header"}, titles), React.createElement("div", {style: [csx.flexRoot, csx.flex, csx.scroll], className: "app-tabs-body"}, rederedTabs.length
            ? rederedTabs
            : React.createElement(tips_1.Tips, null))));
    };
    AppTabsContainer.prototype.gotoPositionOnSelectedTab = function (position) {
        var component = this.getSelectedComponent();
        if (component) {
            component.gotoPosition(position);
        }
    };
    AppTabsContainer.prototype.sendOrClearSearchOnCurrentComponent = function () {
        var component = this.getSelectedComponent();
        if (!component)
            return;
        var options = state.getState().findOptions;
        if (!options.isShown || !options.query) {
            component.hideSearch();
        }
        else {
            component.search(options);
        }
    };
    AppTabsContainer.prototype.selectTab = function (selected) {
        if (this.props.tabs.length == 0) {
            return;
        }
        if (this.props.selectedTabIndex == selected) {
            var component = this.getSelectedComponent();
            if (component) {
                component.focus();
            }
        }
        this.afterComponentDidUpdate(this.focusAndUpdateStuffWeKnowAboutCurrentTab);
        state.selectTab(selected);
    };
    AppTabsContainer.prototype.getSelectedComponent = function () {
        var selected = this.props.selectedTabIndex;
        var tab = this.props.tabs[selected];
        return tab && tab.id ? this.refs[tab.id] : undefined;
    };
    AppTabsContainer.prototype.closeTab = function (index) {
        if (index === this.props.selectedTabIndex) {
            state.setCurrentFilePath('');
        }
        if (!this.props.tabs.length) {
            return;
        }
        var component = this.refs[this.props.tabs[index].id];
        component.close();
        var closed = this.props.tabs[index];
        this.closedTabs.push(closed);
        this.afterComponentDidUpdate(this.sendTabInfoToServer);
        state.removeTab(index);
        if (index == this.props.selectedTabIndex) {
            if (!this.props.tabs.length) {
                return;
            }
            var next = utils_2.rangeLimited({ num: --index, min: 0, max: this.props.tabs.length });
            this.selectTab(next);
        }
        else if (index < this.props.selectedTabIndex) {
            this.afterComponentDidUpdate(this.focusAndUpdateStuffWeKnowAboutCurrentTab);
            state.selectPreviousTab({});
        }
    };
    AppTabsContainer = __decorate([
        react_redux_1.connect(function (state) {
            return {
                tabs: state.tabs,
                selectedTabIndex: state.selectedTabIndex
            };
        }),
        ui.Radium, 
        __metadata('design:paramtypes', [Object])
    ], AppTabsContainer);
    return AppTabsContainer;
})(ui.BaseComponent);
exports.AppTabsContainer = AppTabsContainer;
function getFileName(filePath) {
    var parts = filePath.split('/');
    return parts[parts.length - 1];
}
exports.getFileName = getFileName;
function getComponentByUrl(url) {
    return codeTab_1.Code;
}
exports.getComponentByUrl = getComponentByUrl;
