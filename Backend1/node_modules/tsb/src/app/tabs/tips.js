"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require("react");
var csx = require('csx');
var ui_1 = require("../ui");
var ui = require("../ui");
var utils = require("../../common/utils");
var styles = require("../styles/styles");
var commands = require("../commands/commands");
var tipStyle = {
    fontSize: '2rem',
    color: styles.successColor,
    fontWeight: 'bold',
    userSelect: 'none',
    whiteSpace: 'pre',
};
var tipKeyboardStyle = {
    border: '2px solid',
    borderRadius: '6px'
};
var Tips = (function (_super) {
    __extends(Tips, _super);
    function Tips(props) {
        _super.call(this, props);
        this.tips = [
            {
                message: 'Find a file to work with',
                keyboard: commands.modName + "+P"
            },
            {
                message: 'Set active project',
                keyboard: "Alt+Shift+P"
            },
            {
                message: 'Close a tab',
                keyboard: 'Alt+W'
            },
            {
                message: 'Previous tab',
                keyboard: 'Alt+J'
            },
            {
                message: 'Next tab',
                keyboard: 'Alt+K'
            },
            {
                message: 'Editor keybindings:',
                keyboard: 'Sublime Text'
            },
            {
                message: 'Editor focus from anywhere',
                keyboard: 'Escape'
            }
        ];
        this.state = {
            selected: 0
        };
    }
    Tips.prototype.componentDidMount = function () {
        var _this = this;
        var next = function () { return utils.rangeLimited({ num: _this.state.selected + 1, min: 0, max: _this.tips.length - 1, loopAround: true }); };
        var loop = setInterval(function () { return _this.setState({ selected: next() }); }, 5000);
        this.disposible.add({ dispose: function () { return clearInterval(loop); } });
    };
    Tips.prototype.componentWillUnmount = function () {
        this.disposible.dispose();
    };
    Tips.prototype.render = function () {
        var tip = this.tips[this.state.selected];
        {
        }
        return (React.createElement(ui.VelocityTransitionGroup, {runOnMount: true, enter: { animation: "transition.swoopIn" }, leave: { animation: "transition.whirlOut" }, style: csx.extend(csx.flex, { position: 'relative' }, { background: 'radial-gradient(#444,transparent)' })}, React.createElement("div", {key: this.state.selected, style: csx.extend(csx.newLayer)}, React.createElement("span", {style: csx.extend(csx.newLayer, csx.flexRoot)}, React.createElement("span", {style: csx.extend(csx.flex, csx.centerCenter, tipStyle)}, tip.message, " ", React.createElement("span", {style: tipKeyboardStyle}, " ", tip.keyboard, " "))))));
    };
    return Tips;
})(ui_1.BaseComponent);
exports.Tips = Tips;
