"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var React = require("react");
var ReactDOM = require('react-dom');
var csx = require('csx');
var ui_1 = require("./ui");
var ui = require("./ui");
var utils = require("../common/utils");
var styles = require("./styles/styles");
var state = require("./state/state");
var commands = require("./commands/commands");
var react_redux_1 = require("react-redux");
var icon_1 = require("./icon");
var labelStyle = {
    color: 'grey',
    padding: '4px'
};
var inputCodeStyle = {
    fontFamily: 'monospace',
};
var inputBlackStyle = {
    backgroundColor: '#333',
    color: 'white',
    outline: 'none',
    padding: '2px',
    border: '2px solid #3C3C3C',
    transition: 'border .2s',
    ':focus': {
        border: '2px solid #0090E0',
        boxShadow: '0px 0px 1px 1px #0090E0'
    }
};
var tipMessageStyle = {
    color: 'grey',
    lineHeight: '1.5rem'
};
var keyboardShortCutStyle = {
    border: '2px solid',
    borderRadius: '6px',
    padding: '2px',
    fontSize: '.7rem',
    backgroundColor: 'black',
};
var searchOptionsLabelStyle = {
    color: 'grey',
    fontSize: '1.5rem',
    fontWeight: 'bold',
    cursor: 'pointer',
    paddingLeft: '5px',
    paddingRight: '5px',
};
var FindAndReplace = (function (_super) {
    __extends(FindAndReplace, _super);
    function FindAndReplace() {
        var _this = this;
        _super.apply(this, arguments);
        this.findInput = function () { return ReactDOM.findDOMNode(_this.refs.find); };
        this.replaceInput = function () { return ReactDOM.findDOMNode(_this.refs.replace); };
        this.regexInput = function () { return ReactDOM.findDOMNode(_this.refs.regex.refs.input); };
        this.caseInsensitiveInput = function () { return ReactDOM.findDOMNode(_this.refs.caseInsensitive.refs.input); };
        this.fullWordInput = function () { return ReactDOM.findDOMNode(_this.refs.fullWord.refs.input); };
        this.replaceWith = function () { return _this.replaceInput().value; };
        this.findKeyDownHandler = function (e) {
            var _a = ui.getKeyStates(e), tab = _a.tab, shift = _a.shift, enter = _a.enter;
            if (shift && tab) {
                _this.fullWordInput().focus();
                e.preventDefault();
                return;
            }
            _this.handleSearchKeys(e);
        };
        this.replaceKeyDownHandler = function (e) {
            _this.handleSearchKeys(e);
        };
        this.fullWordKeyDownHandler = function (e) {
            var _a = ui.getKeyStates(e), tab = _a.tab, shift = _a.shift, enter = _a.enter;
            if (tab && !shift) {
                _this.findInput().focus();
                e.preventDefault();
                return;
            }
        };
        this.findChanged = utils.debounce(function () {
            var val = _this.findInput().value;
            state.setFindOptionsQuery(val);
        }, 200);
        this.handleRegexChange = function (e) {
            var val = e.target.checked;
            state.setFindOptionsIsRegex(val);
        };
        this.handleCaseSensitiveChange = function (e) {
            var val = e.target.checked;
            state.setFindOptionsIsCaseSensitive(val);
        };
        this.handleFullWordChange = function (e) {
            var val = e.target.checked;
            state.setFindOptionsIsFullWord(val);
        };
    }
    FindAndReplace.prototype.componentDidMount = function () {
        var _this = this;
        this.disposible.add(commands.findAndReplace.on(function () {
            state.setFindOptionsIsShown(true);
            _this.findInput().select();
            _this.replaceInput().select();
            _this.findInput().focus();
        }));
        this.disposible.add(commands.esc.on(function () {
            state.setFindOptionsIsShown(false);
            _this.findInput().focus();
        }));
    };
    FindAndReplace.prototype.render = function () {
        var shownStyle = this.props.findQuery.isShown ? {} : { display: 'none' };
        return (React.createElement("div", {style: [csx.vertical, shownStyle]}, React.createElement("div", {style: [csx.horizontal, shownStyle]}, React.createElement("div", {style: [csx.flex, csx.vertical]}, React.createElement("div", {style: [csx.horizontal, csx.center, styles.padded1]}, React.createElement("input", {tabIndex: 1, ref: "find", placeholder: "Find", style: [inputBlackStyle, inputCodeStyle, csx.flex], onKeyDown: this.findKeyDownHandler, onChange: this.findChanged, defaultValue: this.props.findQuery.query})), React.createElement("div", {style: [csx.horizontal, csx.center, styles.padded1]}, React.createElement("input", {tabIndex: 2, ref: "replace", placeholder: "Replace", style: [inputBlackStyle, inputCodeStyle, csx.flex], onKeyDown: this.replaceKeyDownHandler}))), React.createElement("div", {style: [csx.centerCenter]}, React.createElement("div", {style: [csx.horizontal, csx.aroundJustified, styles.padded1]}, React.createElement("label", {style: [csx.horizontal, csx.center]}, React.createElement(ui.Toggle, {tabIndex: 3, ref: "regex", onChange: this.handleRegexChange}), React.createElement("span", {style: searchOptionsLabelStyle}, ".*")), React.createElement("label", {style: [csx.horizontal, csx.center]}, React.createElement(ui.Toggle, {tabIndex: 4, ref: "caseInsensitive", onChange: this.handleCaseSensitiveChange}), React.createElement("span", {style: searchOptionsLabelStyle}, "Aa")), React.createElement("label", {style: [csx.horizontal, csx.center]}, React.createElement(ui.Toggle, {tabIndex: 5, ref: "fullWord", onKeyDown: this.fullWordKeyDownHandler, onChange: this.handleFullWordChange}), React.createElement("span", {style: searchOptionsLabelStyle}, React.createElement(icon_1.Icon, {name: "text-width"})))))), React.createElement("div", {style: [tipMessageStyle, styles.padded1]}, React.createElement("span", {style: keyboardShortCutStyle}, "Esc"), " to exit", ' ', React.createElement("span", {style: keyboardShortCutStyle}, "Enter"), " to find next", ' ', React.createElement("span", {style: keyboardShortCutStyle}, "Shift + Enter"), " to find previous", ' ', React.createElement("span", {style: keyboardShortCutStyle}, commands.modName, " + Enter"), " to replace", ' ', React.createElement("span", {style: keyboardShortCutStyle}, "Shift + ", commands.modName, " + Enter"), " to replace all")));
    };
    FindAndReplace.prototype.handleSearchKeys = function (e) {
        var _a = ui.getKeyStates(e), tab = _a.tab, shift = _a.shift, enter = _a.enter, mod = _a.mod;
        if (!state.getState().findOptions.query) {
            return;
        }
        if (mod && shift && enter) {
            commands.replaceAll.emit({ newText: this.replaceWith() });
            return;
        }
        if (mod && enter) {
            commands.replaceNext.emit({ newText: this.replaceWith() });
            return;
        }
        if (shift && enter) {
            commands.findPrevious.emit({});
            return;
        }
        if (enter) {
            commands.findNext.emit({});
            return;
        }
    };
    FindAndReplace = __decorate([
        react_redux_1.connect(function (state) {
            return {
                findQuery: state.findOptions
            };
        }),
        ui.Radium, 
        __metadata('design:paramtypes', [])
    ], FindAndReplace);
    return FindAndReplace;
})(ui_1.BaseComponent);
exports.FindAndReplace = FindAndReplace;
