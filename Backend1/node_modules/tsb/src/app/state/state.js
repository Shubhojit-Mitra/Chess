"use strict";
var simpleRedux_1 = require("./simpleRedux");
var utils = require("../../common/utils");
var initialStoreState = {
    activeProject: null,
    errorsExpanded: false,
    errorsByFilePath: {},
    currentFilePath: '',
    activeProjectFilePathTruthTable: {},
    pendingRequests: [],
    findOptions: {
        isShown: false,
        query: '',
        isRegex: false,
        isCaseSensitive: false,
        isFullWord: false
    },
    socketConnected: false,
    filePaths: [],
    filePathsCompleted: false,
    tabs: [],
    selectedTabIndex: -1,
    showDoctor: false,
};
var redux = new simpleRedux_1.SimpleRedux(initialStoreState);
exports.store = redux.store;
exports.getState = redux.getState;
exports.subscribe = redux.subscribe;
exports.subscribeSub = redux.subscribeSub;
exports.setActiveProject = redux.add('setActiveProject', function (state, payload) {
    return {
        activeProject: payload,
    };
});
exports.inActiveProject = function (filePath) { return !!exports.getState().activeProjectFilePathTruthTable[filePath]; };
exports.setFilePathsInActiveProject = redux.add('setActiveProjectFiles', function (state, payload) {
    var truthTable = utils.createMap(payload);
    return {
        activeProjectFilePathTruthTable: truthTable
    };
});
exports.setCurrentFilePath = redux.add('setCurrentFilePath', function (state, payload) {
    return {
        currentFilePath: payload,
    };
});
exports.expandErrors = redux.add('expandErrors', function (state, payload) {
    return {
        errorsExpanded: true,
    };
});
exports.collapseErrors = redux.add('collapseErrors', function (state, payload) {
    return {
        errorsExpanded: false,
    };
});
exports.setErrorsByFilePath = redux.add('setErrorsByFilePath', function (state, payload) {
    return {
        errorsByFilePath: payload
    };
});
exports.setPendingRequests = redux.add('setPendingRequests', function (state, payload) {
    return {
        pendingRequests: payload
    };
});
exports.setFindOptionsQuery = redux.add('setFindOptionsQuery', function (state, payload) {
    var findQuery = state.findOptions;
    var newFindQuery = redux.updateFields({ query: payload })(findQuery);
    return {
        findOptions: newFindQuery
    };
});
exports.setFindOptionsIsCaseSensitive = redux.add('setFindOptionsIsCaseSensitive', function (state, payload) {
    var findQuery = state.findOptions;
    var newFindQuery = redux.updateFields({ isCaseSensitive: payload })(findQuery);
    return {
        findOptions: newFindQuery
    };
});
exports.setFindOptionsIsRegex = redux.add('setFindOptionsIsRegex', function (state, payload) {
    var findQuery = state.findOptions;
    var newFindQuery = redux.updateFields({ isRegex: payload })(findQuery);
    return {
        findOptions: newFindQuery
    };
});
exports.setFindOptionsIsFullWord = redux.add('setFindOptionsIsFullWord', function (state, payload) {
    var findQuery = state.findOptions;
    var newFindQuery = redux.updateFields({ isFullWord: payload })(findQuery);
    return {
        findOptions: newFindQuery
    };
});
exports.setFindOptionsIsShown = redux.add('setFindOptionsIsShown', function (state, payload) {
    var findQuery = state.findOptions;
    var newFindQuery = redux.updateFields({ isShown: payload })(findQuery);
    return {
        findOptions: newFindQuery
    };
});
exports.setSocketConnected = redux.add('setSocketConnected', function (state, payload) {
    return {
        socketConnected: payload
    };
});
exports.setCompleteFilePaths = redux.add('setCompleteFilePaths', function (state, filePaths) {
    return {
        filePaths: filePaths,
        filePathsCompleted: true
    };
});
exports.setPartialFilePaths = redux.add('setPartialFilePaths', function (state, filePaths) {
    return {
        filePaths: filePaths,
        filePathsCompleted: false
    };
});
exports.setTabs = redux.add('setTabs', function (state, tabs) {
    return {
        tabs: tabs
    };
});
exports.addTabAndSelect = redux.add('addTabAndSelect', function (state, tab) {
    var tabs = state.tabs.concat([tab]);
    var selectedTabIndex = tabs.length - 1;
    return {
        tabs: tabs,
        selectedTabIndex: selectedTabIndex
    };
});
exports.addTabs = redux.add('addTabs', function (state, tabs) {
    tabs = state.tabs.concat(tabs);
    return {
        tabs: tabs
    };
});
exports.setTabSaveStatus = redux.add('setTabSaveStatus', function (state, payload) {
    var tab = state.tabs[payload.index];
    tab = redux.updateFields({ saved: payload.saved })(tab);
    var tabs = redux.updateArrayItem(state.tabs, payload.index, tab);
    return {
        tabs: tabs
    };
});
exports.removeTab = redux.add('removeTab', function (state, index) {
    var tabs = state.tabs.map(function (x, i) { return i == index ? null : x; }).filter(function (x) { return !!x; });
    return {
        tabs: tabs
    };
});
exports.selectPreviousTab = redux.add('selectPreviousTab', function (state, payload) {
    var selectedTabIndex = state.selectedTabIndex > 0 ? state.selectedTabIndex - 1 : -1;
    return {
        selectedTabIndex: selectedTabIndex
    };
});
exports.selectTab = redux.add('selectTab', function (state, payload) {
    return {
        selectedTabIndex: payload
    };
});
exports.getOpenFilePaths = function () { return exports.getState().tabs.filter(function (t) { return t.url.startsWith('file://'); }).map(function (t) { return utils.getFilePathFromUrl(t.url); }); };
exports.getSelectedFilePath = function () {
    var selected = getSelectedTab();
    if (selected) {
        var url = selected.url;
        if (url.startsWith('file://')) {
            return utils.getFilePathFromUrl(url);
        }
    }
};
function getSelectedTab() {
    var selected = exports.getState().tabs[exports.getState().selectedTabIndex];
    return selected;
}
exports.getSelectedTab = getSelectedTab;
exports.toggleDoctor = redux.add('toggleDoctor', function (state, payload) {
    return {
        showDoctor: !state.showDoctor
    };
});
