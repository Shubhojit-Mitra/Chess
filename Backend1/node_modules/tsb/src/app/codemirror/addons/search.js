"use strict";
require('codemirror/addon/search/searchcursor');
require('codemirror/addon/search/matchesonscrollbar');
require('codemirror/addon/search/matchesonscrollbar.css');
var CodeMirror = require('codemirror');
exports.commands = {
    search: function (cm, query) { return startSearch(cm, getSearchState(cm), query); },
    hideSearch: function (cm) { return hideSearch(cm); },
    findNext: function (cm, query) { return findNextIfNotAlreadyDoing(cm, query, false); },
    findPrevious: function (cm, query) { return findNextIfNotAlreadyDoing(cm, query, true); },
    replaceNext: function (cm, newText) { return simpleReplace(cm, newText, false); },
    replaceAll: function (cm, newText) { return simpleReplace(cm, newText, true); },
};
function simpleReplace(codeMirror, newText, all) {
    var cm = codeMirror;
    var query = getSearchState(cm).query;
    var text = newText;
    if (all) {
        replaceAll(cm, query, text);
    }
    else {
        var cursor = getSearchCursor(cm, query, cm.getCursor("start"));
        var match;
        if (!(match = cursor.findNext())) {
            cursor = getSearchCursor(cm, query, CodeMirror.Pos(cm.firstLine(), 0));
            if (!(match = cursor.findNext()))
                return;
        }
        cm.setSelection(cursor.from(), cursor.to());
        cm.scrollIntoView({ from: cursor.from(), to: cursor.to() });
        doReplace();
        findNext(cm, false);
        function doReplace() {
            cursor.replace(text.replace(/\$(\d)/g, function (_, i) { return match[i]; }));
        }
        ;
    }
}
function hideSearch(cm) {
    cm.operation(function () {
        var state = getSearchState(cm);
        if (state.overlay) {
            cm.removeOverlay(state.overlay);
        }
        if (state.annotate) {
            state.annotate.clear();
            state.annotate = null;
        }
        return;
    });
}
function findNextIfNotAlreadyDoing(cm, query, rev) {
    if (rev === void 0) { rev = false; }
    var state = getSearchState(cm);
    if (!state.query || state.query.toString() !== query.toString()) {
        startSearchNoOverlay(cm, getSearchState(cm), query);
    }
    findNext(cm, rev);
}
function startSearchNoOverlay(cm, state, query) {
    state.queryText = query;
    state.query = parseQuery(query);
    if (cm.showMatchesOnScrollbar) {
        if (state.annotate) {
            state.annotate.clear();
            state.annotate = null;
        }
        state.annotate = cm.showMatchesOnScrollbar(state.query, queryCaseInsensitive(state.query));
    }
}
function searchOverlay(query, caseInsensitive) {
    if (typeof query == "string")
        query = new RegExp(query.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&"), caseInsensitive ? "gi" : "g");
    else if (!query.global)
        query = new RegExp(query.source, query.ignoreCase ? "gi" : "g");
    return {
        name: 'searchOverlayMode',
        token: function (stream) {
            query.lastIndex = stream.pos;
            var match = query.exec(stream.string);
            if (match && match.index == stream.pos) {
                stream.pos += match[0].length || 1;
                return "searching";
            }
            else if (match) {
                stream.pos = match.index;
            }
            else {
                stream.skipToEnd();
            }
        } };
}
function SearchState() {
    this.posFrom = this.posTo = this.lastQuery = this.query = null;
    this.overlay = null;
}
function getSearchState(cm) {
    return cm.state.search || (cm.state.search = new SearchState());
}
function queryCaseInsensitive(query) {
    return typeof query == "string" && query == query.toLowerCase();
}
function getSearchCursor(cm, query, pos) {
    return cm.getSearchCursor(query, pos, queryCaseInsensitive(query));
}
function persistentDialog(cm, text, deflt, f) {
    cm.openDialog(text, f, {
        value: deflt,
        selectValueOnOpen: true,
        closeOnEnter: false,
        onClose: function () { clearSearch(cm); }
    });
}
function dialog(cm, text, shortText, deflt, f) {
    if (cm.openDialog)
        cm.openDialog(text, f, { value: deflt, selectValueOnOpen: true });
    else
        f(prompt(shortText, deflt));
}
function confirmDialog(cm, text, shortText, fs) {
    if (cm.openConfirm)
        cm.openConfirm(text, fs);
    else if (confirm(shortText))
        fs[0]();
}
function parseString(string) {
    return string.replace(/\\(.)/g, function (_, ch) {
        if (ch == "n")
            return "\n";
        if (ch == "r")
            return "\r";
        return ch;
    });
}
function parseQuery(query) {
    return query;
}
var queryDialog = 'Search: <input type="text" style="width: 10em" class="CodeMirror-search-field"/> <span style="color: #888" class="CodeMirror-search-hint">(Use /re/ syntax for regexp search)</span>';
function startSearch(cm, state, query) {
    state.queryText = query;
    state.query = parseQuery(query);
    cm.removeOverlay(state.overlay, queryCaseInsensitive(state.query));
    state.overlay = searchOverlay(state.query, queryCaseInsensitive(state.query));
    cm.addOverlay(state.overlay);
    if (cm.showMatchesOnScrollbar) {
        if (state.annotate) {
            state.annotate.clear();
            state.annotate = null;
        }
        state.annotate = cm.showMatchesOnScrollbar(state.query, queryCaseInsensitive(state.query));
    }
}
function doSearch(cm, rev, persistent) {
    var state = getSearchState(cm);
    if (state.query)
        return findNext(cm, rev);
    var q = cm.getSelection() || state.lastQuery;
    if (persistent && cm.openDialog) {
        var hiding = null;
        persistentDialog(cm, queryDialog, q, function (query, event) {
            CodeMirror.e_stop(event);
            if (!query)
                return;
            if (query != state.queryText)
                startSearch(cm, state, query);
            if (hiding)
                hiding.style.opacity = 1;
            findNext(cm, event.shiftKey, function (_, to) {
                var dialog;
                if (to.line < 3 && document.querySelector &&
                    (dialog = cm.display.wrapper.querySelector(".CodeMirror-dialog")) &&
                    dialog.getBoundingClientRect().bottom - 4 > cm.cursorCoords(to, "window").top)
                    (hiding = dialog).style.opacity = .4;
            });
        });
    }
    else {
        dialog(cm, queryDialog, "Search for:", q, function (query) {
            if (query && !state.query)
                cm.operation(function () {
                    startSearch(cm, state, query);
                    state.posFrom = state.posTo = cm.getCursor();
                    findNext(cm, rev);
                });
        });
    }
}
function findNext(cm, rev, callback) {
    cm.operation(function () {
        var state = getSearchState(cm);
        var cursor = getSearchCursor(cm, state.query, rev ? state.posFrom : state.posTo);
        if (!cursor.find(rev)) {
            cursor = getSearchCursor(cm, state.query, rev ? CodeMirror.Pos(cm.lastLine()) : CodeMirror.Pos(cm.firstLine(), 0));
            if (!cursor.find(rev))
                return;
        }
        cm.setSelection(cursor.from(), cursor.to());
        cm.scrollIntoView({ from: cursor.from(), to: cursor.to() }, 20);
        state.posFrom = cursor.from();
        state.posTo = cursor.to();
        if (callback)
            callback(cursor.from(), cursor.to());
    });
}
function clearSearch(cm) {
    cm.operation(function () {
        var state = getSearchState(cm);
        state.lastQuery = state.query;
        if (!state.query)
            return;
        state.query = state.queryText = null;
        cm.removeOverlay(state.overlay);
        if (state.annotate) {
            state.annotate.clear();
            state.annotate = null;
        }
    });
}
var replaceQueryDialog = ' <input type="text" style="width: 10em" class="CodeMirror-search-field"/> <span style="color: #888" class="CodeMirror-search-hint">(Use /re/ syntax for regexp search)</span>';
var replacementQueryDialog = 'With: <input type="text" style="width: 10em" class="CodeMirror-search-field"/>';
var doReplaceConfirm = "Replace? <button>Yes</button> <button>No</button> <button>All</button> <button>Stop</button>";
function replaceAll(cm, query, text) {
    cm.operation(function () {
        for (var cursor = getSearchCursor(cm, query); cursor.findNext();) {
            if (typeof query != "string") {
                var match = cm.getRange(cursor.from(), cursor.to()).match(query);
                cursor.replace(text.replace(/\$(\d)/g, function (_, i) { return match[i]; }));
            }
            else
                cursor.replace(text);
        }
    });
}
function replace(cm, all) {
    if (cm.getOption("readOnly"))
        return;
    var query = cm.getSelection() || getSearchState(cm).lastQuery;
    var dialogText = all ? "Replace all:" : "Replace:";
    dialog(cm, dialogText + replaceQueryDialog, dialogText, query, function (query) {
        if (!query)
            return;
        query = parseQuery(query);
        dialog(cm, replacementQueryDialog, "Replace with:", "", function (text) {
            text = parseString(text);
            if (all) {
                replaceAll(cm, query, text);
            }
            else {
                clearSearch(cm);
                var cursor = getSearchCursor(cm, query, cm.getCursor());
                var advance = function () {
                    var start = cursor.from(), match;
                    if (!(match = cursor.findNext())) {
                        cursor = getSearchCursor(cm, query);
                        if (!(match = cursor.findNext()) ||
                            (start && cursor.from().line == start.line && cursor.from().ch == start.ch))
                            return;
                    }
                    cm.setSelection(cursor.from(), cursor.to());
                    cm.scrollIntoView({ from: cursor.from(), to: cursor.to() });
                    confirmDialog(cm, doReplaceConfirm, "Replace?", [function () { doReplace(match); }, advance,
                        function () { replaceAll(cm, query, text); }]);
                };
                var doReplace = function (match) {
                    cursor.replace(typeof query == "string" ? text :
                        text.replace(/\$(\d)/g, function (_, i) { return match[i]; }));
                    advance();
                };
                advance();
            }
        });
    });
}
