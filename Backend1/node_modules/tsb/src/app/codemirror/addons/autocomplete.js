"use strict";
var CM = require('codemirror');
var CodeMirror = CM;
require('codemirror/addon/hint/show-hint');
require('codemirror/addon/hint/javascript-hint');
var utils_1 = require("../../../common/utils");
var socketClient_1 = require("../../../socket/socketClient");
var state = require("../../state/state");
var jumpy = require("./jumpy");
require('./autocomplete.css');
var templates = require("./templates");
function setupOptions(cmOptions, filePath) {
    cmOptions.showHint = true;
    cmOptions.hintOptions = {
        completeOnSingleClick: true,
        completeSingle: false,
        hint: new AutoCompleter(filePath).hint,
    };
}
exports.setupOptions = setupOptions;
function setupCodeMirror(cm) {
    var timeout;
    var ignoreEnds = utils_1.createMap([
        ';', ',',
        '(', ')',
        '`', '"', "'",
        "{", "}", "[", "]",
        " "
    ]);
    cm.on("inputRead", function (ed, change) {
        var editor = ed;
        if (timeout) {
            clearTimeout(timeout);
        }
        if (change.origin !== '+input') {
            return;
        }
        if (jumpy.getState(ed).shown) {
            return;
        }
        if (change && change.text && ignoreEnds[change.text.join('')]) {
            return;
        }
        timeout = setTimeout(function () {
            if (editor.state.completionActive) {
                var cur = editor.getDoc().getCursor();
                if (editor.getTokenAt(cur).string !== '.') {
                    return;
                }
            }
            CodeMirror.showHint(cm);
        }, 150);
    });
}
exports.setupCodeMirror = setupCodeMirror;
var AutoCompleter = (function () {
    function AutoCompleter(filePath) {
        var _this = this;
        this.filePath = filePath;
        this.hint = function (editor, cb, options) {
            var cur = editor.getDoc().getCursor();
            var token = editor.getTokenAt(cur);
            var prefix = token.string;
            var position = editor.getDoc().indexFromPos(cur);
            _this.lastRequest = position;
            var noCompletions = null;
            function render(elt, data, cur) {
                var original = cur.original;
                var _a = [kindToColor(original.kind), kindToColor(original.kind, true)], color = _a[0], colorBackground = _a[1];
                elt.innerHTML = ("\n                <strong class=\"hint left\" style=\"color:" + color + ";background:" + colorBackground + "\">" + original.kind + "</strong>\n                <span class=\"hint main\">" + original.name + "</span>\n                <span class=\"hint right\">" + original.display + "</span>\n            ").replace(/\s+/g, ' ');
            }
            function completionToCodeMirrorHint(completion) {
                var result = {
                    text: completion.name,
                    render: render,
                    original: completion
                };
                return result;
            }
            function setupCompletionDocs(obj) {
                var cls = "CodeMirror-Tern-";
                var tooltip = null;
                CodeMirror.on(obj, "close", function () { remove(tooltip); });
                CodeMirror.on(obj, "update", function () { remove(tooltip); });
                CodeMirror.on(obj, "select", function (cur, node) {
                    remove(tooltip);
                    var content = cur.original && cur.original.comment;
                    if (content) {
                        tooltip = makeTooltip(node.parentNode.getBoundingClientRect().right + window.pageXOffset, node.getBoundingClientRect().top + window.pageYOffset, content);
                        tooltip.className += " " + cls + "hint-doc";
                    }
                });
                return obj;
                function remove(node) {
                    var p = node && node.parentNode;
                    if (p)
                        p.removeChild(node);
                }
                function makeTooltip(x, y, content) {
                    var node = elt("div", cls + "tooltip", content);
                    node.style.left = x + "px";
                    node.style.top = y + "px";
                    document.body.appendChild(node);
                    return node;
                }
                function elt(tagname, cls) {
                    var e = document.createElement(tagname);
                    if (cls)
                        e.className = cls;
                    for (var i = 2; i < arguments.length; ++i) {
                        var elt = arguments[i];
                        if (typeof elt == "string")
                            elt = document.createTextNode(elt);
                        e.appendChild(elt);
                    }
                    return e;
                }
            }
            if (state.inActiveProject(editor.filePath)) {
                socketClient_1.server.getCompletionsAtPosition({ filePath: _this.filePath, position: position, prefix: prefix }).then(function (res) {
                    if (_this.lastRequest !== position) {
                        cb(null);
                        return;
                    }
                    var from = { line: cur.line, ch: token.start };
                    var to = { line: cur.line, ch: token.start + prefix.length };
                    if (token.string == '.') {
                        from = to;
                    }
                    var completionInfo = {
                        from: from,
                        to: to,
                        list: res.completions.filter(function (x) { return !x.snippet; }).map(completionToCodeMirrorHint)
                    };
                    completionInfo.list = completionInfo.list.concat(templates.getCompletions(editor, token.string));
                    setupCompletionDocs(completionInfo);
                    cb(completionInfo);
                });
                return;
            }
            else {
                cb(noCompletions);
                return;
            }
        };
        this.hint.async = true;
    }
    return AutoCompleter;
})();
exports.AutoCompleter = AutoCompleter;
function kindToColor(kind, lighten) {
    if (lighten === void 0) { lighten = false; }
    var add = lighten ? 50 : 0;
    var opacity = lighten ? 0.2 : 1;
    var base = 'white';
    switch (kind) {
        case ts.ScriptElementKind.keyword:
            return "rgba(" + (0xf9 + add) + "," + (0x26 + add) + "," + (0x72 + add) + "," + opacity + ")";
        case ts.ScriptElementKind.scriptElement:
        case ts.ScriptElementKind.moduleElement:
        case ts.ScriptElementKind.classElement:
        case ts.ScriptElementKind.localClassElement:
        case ts.ScriptElementKind.interfaceElement:
        case ts.ScriptElementKind.typeElement:
        case ts.ScriptElementKind.enumElement:
        case ts.ScriptElementKind.alias:
        case ts.ScriptElementKind.typeParameterElement:
        case ts.ScriptElementKind.primitiveType:
            return "rgba(" + (0xe6 + add) + "," + (0xdb + add) + "," + (0x74 + add) + "," + opacity + ")";
        case ts.ScriptElementKind.variableElement:
        case ts.ScriptElementKind.localVariableElement:
        case ts.ScriptElementKind.memberVariableElement:
        case ts.ScriptElementKind.letElement:
        case ts.ScriptElementKind.constElement:
        case ts.ScriptElementKind.label:
        case ts.ScriptElementKind.parameterElement:
        case ts.ScriptElementKind.indexSignatureElement:
            return "rgba(" + (0x66 + add) + "," + (0xd9 + add) + "," + (0xef + add) + "," + opacity + ")";
        case ts.ScriptElementKind.functionElement:
        case ts.ScriptElementKind.localFunctionElement:
        case ts.ScriptElementKind.memberFunctionElement:
        case ts.ScriptElementKind.memberGetAccessorElement:
        case ts.ScriptElementKind.memberSetAccessorElement:
        case ts.ScriptElementKind.callSignatureElement:
        case ts.ScriptElementKind.constructorImplementationElement:
            return "rgba(" + (0xa6 + add) + "," + (0xe2 + add) + "," + (0x2e + add) + "," + opacity + ")";
        default:
            return base;
    }
}
