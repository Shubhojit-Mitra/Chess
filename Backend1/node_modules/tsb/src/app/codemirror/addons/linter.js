"use strict";
var CM = require('codemirror');
var CodeMirror = CM;
var state = require("../../state/state");
require('codemirror/addon/lint/lint.css');
var lint = require('./lint');
var _import = lint;
require('./lint.css');
function setupOptions(options, filePath) {
    options.lint = new Linter(filePath).lint;
    options.gutters.push("CodeMirror-lint-markers");
}
exports.setupOptions = setupOptions;
function codeErrorToLintError(codeError) {
    return {
        message: codeError.message,
        severity: 'error',
        from: CodeMirror.Pos(codeError.from.line, codeError.from.ch),
        to: CodeMirror.Pos(codeError.to.line, codeError.to.ch)
    };
}
var Linter = (function () {
    function Linter(filePath) {
        var _this = this;
        this.filePath = filePath;
        this.lint = function (doc, options, cm) {
            var rawErrors = state.getState().errorsByFilePath[_this.filePath] || [];
            var errors = rawErrors.map(codeErrorToLintError);
            return errors;
        };
        this.widgets = [];
    }
    Linter.prototype.updateInlineWidgets = function (editor, codeErrors) {
        var widgets = this.widgets;
        editor.operation(function () {
            for (var i = 0; i < widgets.length; ++i) {
                editor.removeLineWidget(widgets[i]);
            }
            widgets.length = 0;
            for (var i = 0; i < codeErrors.length; ++i) {
                var err = codeErrors[i];
                var msg = document.createElement("div");
                msg.innerHTML = "<div style=\"font-size: 0.7rem; padding: 3px; background-color: black;\">\n                    \uD83D\uDC1B " + err.message + "\n                </div>";
                widgets.push(editor.addLineWidget(err.from.line, msg, { coverGutter: false, noHScroll: true }));
            }
        });
        var info = editor.getScrollInfo();
        var after = editor.charCoords({ line: editor.getDoc().getCursor().line + 1, ch: 0 }, "local").top;
        if (info.top + info.clientHeight < after) {
            editor.scrollTo(null, after - info.clientHeight + 3);
        }
    };
    return Linter;
})();
