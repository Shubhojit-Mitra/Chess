"use strict";
var state = require("./state/state");
var utils = require("../common/utils");
var commands = require("./commands/commands");
var appTabsContainer_1 = require("./tabs/appTabsContainer");
var docCache = require("./codemirror/mode/docCache");
function setup() {
    commands.commandRegistry
        .filter(function (x) { return x.config.context == commands.CommandContext.Editor; })
        .forEach(function (cmd) {
        cmd.on(function () {
            var editor = API.getFocusedCodeEditorIfAny();
            if (editor && editor.codeMirror) {
                editor.codeMirror.execCommand(cmd.config.editorCommandName);
            }
        });
    });
}
exports.setup = setup;
var API;
(function (API) {
    function getClosedVsOpenFilePaths(filePaths) {
        var allOpen = state.getOpenFilePaths();
        var alreadyOpenFilePaths = filePaths.filter(function (fp) { return allOpen.indexOf(fp) != -1; });
        var currentlyClosedFilePaths = filePaths.filter(function (fp) { return allOpen.indexOf(fp) == -1; });
        return { alreadyOpenFilePaths: alreadyOpenFilePaths, currentlyClosedFilePaths: currentlyClosedFilePaths };
    }
    API.getClosedVsOpenFilePaths = getClosedVsOpenFilePaths;
    function applyRefactorings(refactorings) {
        var currentlyClosedFilePaths = getClosedVsOpenFilePaths(Object.keys(refactorings)).currentlyClosedFilePaths;
        var tabs = currentlyClosedFilePaths.map(function (fp) {
            var codeTab = {
                id: utils.createId(),
                url: "file://" + fp,
                saved: true
            };
            return codeTab;
        });
        state.addTabs(tabs);
        docCache.applyRefactoringsToTsDocs(refactorings);
    }
    API.applyRefactorings = applyRefactorings;
    function getFocusedCodeEditorIfAny() {
        var _a = state.getState(), tabs = _a.tabs, selectedTabIndex = _a.selectedTabIndex;
        if (tabs.length == 0)
            return undefined;
        var focusedTab = tabs[selectedTabIndex];
        if (!focusedTab.url.startsWith('file:'))
            return undefined;
        var focusedTabComponent = appTabsContainer_1.appTabsContainer.refs[focusedTab.id];
        var editor = focusedTabComponent.refs.editor;
        return editor;
    }
    API.getFocusedCodeEditorIfAny = getFocusedCodeEditorIfAny;
})(API = exports.API || (exports.API = {}));
