"use strict";
var commands = require("./commands/commands");
var utils = require("../common/utils");
var state = require("./state/state");
var currentIndex = -1;
var history = [];
var tooMany = 200;
commands.previousCursorLocation.on(function () {
    previous();
});
commands.nextCursorLocation.on(function () {
    next();
});
function previous() {
    currentIndex = utils.rangeLimited({ min: 0, max: history.length - 1, num: currentIndex - 1 });
    var tab = history[currentIndex];
    if (tab) {
        commands.doOpenOrFocusTab.emit({ tabId: tab.tabId, tabUrl: tab.tabUrl, position: tab.position });
    }
}
exports.previous = previous;
function next() {
    currentIndex = utils.rangeLimited({ min: 0, max: history.length - 1, num: currentIndex + 1 });
    var tab = history[currentIndex];
    if (tab) {
        commands.doOpenOrFocusTab.emit({ tabId: tab.tabId, tabUrl: tab.tabUrl, position: tab.position });
    }
}
exports.next = next;
exports.addEntry = utils.debounce(function (editorPosition) {
    var selectedTab = state.getSelectedTab();
    if (!selectedTab) {
        console.error('adding a cursor history should not have been called if there is no active tab');
        return;
    }
    if (!selectedTab.url.startsWith('file://')) {
        console.error('adding a cursor history should not have been called if active tab is not a filePath');
        return;
    }
    var potentialNewEntry = {
        tabId: selectedTab.id,
        tabUrl: selectedTab.url,
        position: editorPosition
    };
    var isSame = function (pos1, pos2) { return pos1.line == pos2.line && pos1.ch == pos2.ch; };
    var testEntry = history[currentIndex];
    if (testEntry && testEntry.tabId == potentialNewEntry.tabId) {
        if (isSame(editorPosition, testEntry.position)) {
            return;
        }
    }
    testEntry = history[currentIndex - 1];
    if (testEntry && testEntry.tabId == potentialNewEntry.tabId) {
        if (isSame(editorPosition, testEntry.position)) {
            currentIndex--;
            return;
        }
    }
    testEntry = history[currentIndex + 1];
    if (testEntry && testEntry.tabId == potentialNewEntry.tabId) {
        if (isSame(editorPosition, testEntry.position)) {
            currentIndex++;
            return;
        }
    }
    currentIndex++;
    history.splice(currentIndex, 0, potentialNewEntry);
    if (history.length >= tooMany) {
        if (currentIndex == history.length - 1) {
            history.shift();
            currentIndex--;
        }
        else {
            history.pop();
        }
    }
}, 800);
var debug = function () {
    console.log(history.map(function (h) { return h.tabUrl + ':' + h.position.line + ':' + h.position.ch; }));
    console.log(currentIndex);
};
