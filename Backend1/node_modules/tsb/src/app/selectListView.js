"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var React = require("react");
var ReactDOM = require("react-dom");
var csx = require('csx');
var ui_1 = require("./ui");
var ui = require("./ui");
var Modal = require('react-modal');
var styles = require("./styles/styles");
var utils_1 = require("../common/utils");
var commands = require("./commands/commands");
var fuzzaldrin_1 = require("fuzzaldrin");
var SelectListView = (function (_super) {
    __extends(SelectListView, _super);
    function SelectListView(props) {
        var _this = this;
        _super.call(this, props);
        this.maxShowCount = 15;
        this.closeOmniSearch = function () {
            _this.setState({ isOpen: false, filterValue: '' });
        };
        this.onChangeFilter = utils_1.debounce(function (e) {
            var filterValue = ReactDOM.findDOMNode(_this.refs.omniSearchInput).value;
            _this.filteredResults = getFilteredItems({
                items: _this.state.data,
                textify: _this.state.textify,
                filterValue: filterValue
            });
            _this.filteredResults = _this.filteredResults.slice(0, _this.maxShowCount);
            _this.setState({ filterValue: filterValue, selectedIndex: 0 });
        }, 50);
        this.incrementSelected = utils_1.debounce(function () {
            _this.setState({ selectedIndex: utils_1.rangeLimited({ num: ++_this.state.selectedIndex, min: 0, max: Math.min(_this.maxShowCount - 1, _this.filteredResults.length - 1), loopAround: true }) });
        }, 0, true);
        this.decrementSelected = utils_1.debounce(function () {
            _this.setState({ selectedIndex: utils_1.rangeLimited({ num: --_this.state.selectedIndex, min: 0, max: Math.min(_this.maxShowCount - 1, _this.filteredResults.length - 1), loopAround: true }) });
        }, 0, true);
        this.onChangeSelected = function (e) {
            if (e.key == 'ArrowUp') {
                e.preventDefault();
                _this.decrementSelected();
            }
            if (e.key == 'ArrowDown') {
                e.preventDefault();
                _this.incrementSelected();
            }
            if (e.key == 'Enter') {
                e.preventDefault();
                _this.selectIndex(_this.state.selectedIndex);
            }
        };
        this.selectIndex = function (index) {
            var result = _this.filteredResults[index];
            _this.state.onSelect(result);
            _this.closeOmniSearch();
        };
        this.filteredResults = [];
        this.state = {
            isOpen: false,
            selectedIndex: 0,
            header: '',
            data: [],
        };
    }
    SelectListView.prototype.show = function (args) {
        this.filteredResults = args.data.concat([]);
        this.setState({
            isOpen: true,
            filterValue: '',
            selectedIndex: 0,
            header: args.header,
            data: args.data,
            render: args.render,
            textify: args.textify,
            onSelect: args.onSelect,
        });
        ReactDOM.findDOMNode(this.refs.omniSearchInput).focus();
    };
    SelectListView.prototype.componentDidMount = function () {
        var _this = this;
        exports.selectListView = this;
        commands.esc.on(function () {
            _this.closeOmniSearch();
        });
    };
    SelectListView.prototype.render = function () {
        var _this = this;
        var fileList = this.filteredResults;
        var selectedIndex = this.state.selectedIndex;
        var fileListRendered = fileList.map(function (item, i) {
            var selected = selectedIndex === i;
            var selectedStyle = selected ? {
                background: '#545454',
                color: 'white'
            } : {};
            return (React.createElement("div", {key: i, style: [selectedStyle, styles.padded2, styles.hand], onClick: function () { return _this.selectIndex(i); }}, _this.state.render(item, renderMatchedSegments(_this.state.textify(item), _this.state.filterValue))));
        });
        return React.createElement(Modal, {isOpen: this.state.isOpen, onRequestClose: this.closeOmniSearch}, React.createElement("div", {style: [csx.vertical, csx.flex]}, React.createElement("div", {style: [csx.horizontal]}, React.createElement("h4", null, this.state.header), React.createElement("div", {style: [csx.flex]}), React.createElement("div", {style: { fontSize: '0.9rem', color: 'grey' }}, React.createElement("code", {style: styles.modal.keyStrokeStyle}, "Esc"), " to exit ", React.createElement("code", {style: styles.modal.keyStrokeStyle}, "Enter"), " to select")), React.createElement("div", {style: [styles.padded1TopBottom, csx.vertical]}, React.createElement("input", {type: "text", ref: "omniSearchInput", placeholder: "Filter", onChange: this.onChangeFilter, onKeyDown: this.onChangeSelected})), React.createElement("div", {style: [csx.vertical, csx.flex, { overflow: 'auto' }]}, React.createElement("div", {style: [csx.vertical]}, fileListRendered))));
    };
    SelectListView = __decorate([
        ui.Radium, 
        __metadata('design:paramtypes', [Object])
    ], SelectListView);
    return SelectListView;
})(ui_1.BaseComponent);
exports.SelectListView = SelectListView;
function getFilteredItems(args) {
    var textValues = args.items.map(args.textify);
    var textValuesToItem = {};
    args.items.forEach(function (item) {
        textValuesToItem[args.textify(item)] = item;
    });
    return fuzzaldrin_1.filter(textValues, args.filterValue).map(function (textvalue) { return textValuesToItem[textvalue]; });
}
exports.getFilteredItems = getFilteredItems;
function renderMatchedSegments(result, query) {
    function getMatchedSegments(result, query) {
        var matches = fuzzaldrin_1.match(result, query);
        var matchMap = utils_1.createMap(matches);
        var currentUnmatchedCharacters = [];
        var currentMatchedCharacters = [];
        var combined = [];
        function closeOffUnmatched() {
            if (currentUnmatchedCharacters.length) {
                combined.push({ str: currentUnmatchedCharacters.join(''), matched: false });
                currentUnmatchedCharacters = [];
            }
        }
        function closeOffMatched() {
            if (currentMatchedCharacters.length) {
                combined.push({ str: currentMatchedCharacters.join(''), matched: true });
                currentMatchedCharacters = [];
            }
        }
        result.split('').forEach(function (c, i) {
            var isMatched = matchMap[i];
            if (isMatched) {
                if (currentMatchedCharacters.length) {
                    currentMatchedCharacters.push(c);
                }
                else {
                    currentMatchedCharacters = [c];
                    closeOffUnmatched();
                }
            }
            else {
                if (currentUnmatchedCharacters.length) {
                    currentUnmatchedCharacters.push(c);
                }
                else {
                    currentUnmatchedCharacters = [c];
                    closeOffMatched();
                }
            }
        });
        closeOffMatched();
        closeOffUnmatched();
        return combined;
    }
    var matched = getMatchedSegments(result, query);
    return matched.map(function (item, i) {
        if (item.matched) {
            return React.createElement("strong", {key: i}, item.str);
        }
        else {
            return React.createElement("span", {key: i}, item.str);
        }
    });
}
exports.renderMatchedSegments = renderMatchedSegments;
