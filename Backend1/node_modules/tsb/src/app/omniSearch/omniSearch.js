"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var React = require("react");
var ReactDOM = require("react-dom");
var csx = require('csx');
var ui_1 = require("../ui");
var ui = require("../ui");
var Modal = require('react-modal');
var styles = require("../styles/styles");
var utils_1 = require("../../common/utils");
var socketClient_1 = require("../../socket/socketClient");
var commands = require("../commands/commands");
var fuzzaldrin_1 = require("fuzzaldrin");
var icon_1 = require("../icon");
var events_1 = require("../../common/events");
var state = require("../state/state");
var types = require("../../common/types");
var robocop_1 = require("../robocop");
var selectListView_1 = require(".././selectListView");
var SearchMode;
(function (SearchMode) {
    SearchMode[SearchMode["Unknown"] = 0] = "Unknown";
    SearchMode[SearchMode["File"] = 1] = "File";
    SearchMode[SearchMode["Command"] = 2] = "Command";
    SearchMode[SearchMode["Project"] = 3] = "Project";
})(SearchMode || (SearchMode = {}));
var selectedStyle = {
    background: '#545454',
    color: 'white'
};
var listItemStyle = {
    fontFamily: 'monospace'
};
var searchingNameStyle = { marginTop: '0', marginBottom: '0', marginLeft: '10px', border: '1px solid grey', padding: '4px 4px', background: 'black' };
var OmniSearch = (function (_super) {
    __extends(OmniSearch, _super);
    function OmniSearch(props) {
        var _this = this;
        _super.call(this, props);
        this.mode = SearchMode.File;
        this.searchState = new SearchState();
        this.wasShown = false;
        this.setRawFilterValue = function (value) {
            var input = ReactDOM.findDOMNode(_this.refs.omniSearchInput);
            if (!input)
                return;
            input.value = value;
            var len = value.length;
            input.setSelectionRange(len, len);
        };
        this.onChangeFilter = utils_1.debounce(function (e) {
            var filterValue = ReactDOM.findDOMNode(_this.refs.omniSearchInput).value;
            _this.searchState.newValue(filterValue);
        }, 50);
        this.incrementSelected = utils_1.debounce(function () {
            _this.searchState.incrementSelected();
        }, 0, true);
        this.decrementSelected = utils_1.debounce(function () {
            _this.searchState.decrementSelected();
        }, 0, true);
        this.onChangeSelected = function (event) {
            var keyStates = ui.getKeyStates(event);
            if (keyStates.up || keyStates.tabPrevious) {
                event.preventDefault();
                _this.decrementSelected();
            }
            if (keyStates.down || keyStates.tabNext) {
                event.preventDefault();
                _this.incrementSelected();
            }
            if (keyStates.enter) {
                event.preventDefault();
                _this.searchState.choseIndex(_this.searchState.selectedIndex);
            }
        };
        this.searchState.stateChanged.on(function () { return _this.forceUpdate(); });
        this.searchState.setParentUiRawFilterValue = function (value) {
            _this.setRawFilterValue(value);
        };
        this.state = this.propsToState(props);
    }
    OmniSearch.prototype.propsToState = function (props) {
        return {};
    };
    OmniSearch.prototype.componentWillReceiveProps = function (props) {
        this.setState(this.propsToState(props));
    };
    OmniSearch.prototype.componentDidMount = function () {
        var _this = this;
        commands.omniFindFile.on(function () {
            _this.searchState.openOmniSearch(SearchMode.File);
        });
        commands.omniFindCommand.on(function () {
            _this.searchState.openOmniSearch(SearchMode.Command);
        });
        commands.omniSelectProject.on(function () {
            _this.searchState.openOmniSearch(SearchMode.Project);
        });
    };
    OmniSearch.prototype.componentWillUpdate = function () {
        this.wasShown = this.searchState.isShown;
    };
    OmniSearch.prototype.componentDidUpdate = function () {
        var _this = this;
        setTimeout(function () {
            if (_this.refs.selected) {
                var selected = _this.refs.selected;
                var searchScroll = _this.refs.selected;
                selected.scrollIntoViewIfNeeded(false);
            }
            if (_this.searchState.isShown) {
                var input = _this.refs.omniSearchInput;
                input.focus();
                if (!_this.wasShown) {
                    var len = input.value.length;
                    input.setSelectionRange(len, len);
                    _this.wasShown = true;
                }
            }
        });
    };
    OmniSearch.prototype.render = function () {
        var renderedResults = this.searchState.renderResults();
        var searchingName = this.searchState.getSearchingName();
        return React.createElement(Modal, {isOpen: this.searchState.isShown, onRequestClose: this.searchState.closeOmniSearch}, React.createElement("div", {style: [csx.vertical, csx.flex]}, React.createElement("div", {style: [csx.horizontal, csx.center]}, React.createElement("h4", {style: { marginTop: '1rem', marginBottom: '1rem' }}, "Omni Search ", React.createElement(icon_1.Icon, {name: "search"})), searchingName ? React.createElement("h5", {style: searchingNameStyle}, searchingName) : '', React.createElement("div", {style: [csx.flex]}), React.createElement("div", {style: { fontSize: '0.9rem', color: 'grey' }}, React.createElement("code", {style: styles.modal.keyStrokeStyle}, "Esc"), " to exit ", React.createElement("code", {style: styles.modal.keyStrokeStyle}, "Enter"), " to select")), React.createElement("div", {style: [styles.padded1TopBottom, csx.vertical]}, React.createElement("input", {defaultValue: this.searchState.rawFilterValue, style: styles.modal.inputStyle, type: "text", ref: "omniSearchInput", placeholder: "Filter", onChange: this.onChangeFilter, onKeyDown: this.onChangeSelected})), this.searchState.optionalMessage(), React.createElement("div", {ref: "searchScroll", className: "scrollContainer", style: [csx.vertical, csx.flex, { overflow: 'auto' }]}, renderedResults)));
    };
    OmniSearch = __decorate([
        ui.Radium, 
        __metadata('design:paramtypes', [Object])
    ], OmniSearch);
    return OmniSearch;
})(ui_1.BaseComponent);
exports.OmniSearch = OmniSearch;
var SearchState = (function () {
    function SearchState() {
        var _this = this;
        this.rawFilterValue = '';
        this.parsedFilterValue = '';
        this.modeDescriptions = [];
        this.filePaths = [];
        this.filePathsCompleted = false;
        this.availableProjects = [];
        this.commands = commands.commandRegistry;
        this.filteredValues = [];
        this.mode = SearchMode.File;
        this.modeMap = {};
        this.isShown = false;
        this.selectedIndex = 0;
        this.stateChanged = new events_1.TypedEvent();
        this.setParentUiRawFilterValue = function (rawFilterValue) { return null; };
        this.maxShowCount = 20;
        this.choseIndex = function (index) {
            if (_this.mode == SearchMode.Unknown) {
                var modeDescription = _this.filteredValues[index];
                _this.rawFilterValue = modeDescription.shortcut + '>';
                _this.newValue(_this.rawFilterValue);
                _this.setParentUiRawFilterValue(_this.rawFilterValue);
                return;
            }
            if (_this.mode == SearchMode.File) {
                var filePath = _this.filteredValues[index];
                if (filePath) {
                    commands.doOpenFile.emit({ filePath: filePath });
                }
                _this.closeOmniSearch();
                return;
            }
            if (_this.mode == SearchMode.Command) {
                var command = _this.filteredValues[index];
                if (command) {
                    command.emit({});
                }
                if (command !== commands.omniFindFile
                    && command !== commands.omniFindCommand
                    && command !== commands.omniSelectProject) {
                    _this.closeOmniSearch();
                }
                return;
            }
            if (_this.mode == SearchMode.Project) {
                var activeProject = _this.filteredValues[index];
                if (activeProject) {
                    socketClient_1.server.setActiveProjectConfigDetails(activeProject);
                    state.setActiveProject(activeProject);
                    state.setFilePathsInActiveProject([]);
                }
                _this.closeOmniSearch();
                return;
            }
        };
        this.incrementSelected = function () {
            _this.selectedIndex = utils_1.rangeLimited({ num: _this.selectedIndex + 1, min: 0, max: _this.filteredValues.length - 1, loopAround: true });
            _this.stateChanged.emit({});
        };
        this.decrementSelected = function () {
            _this.selectedIndex = utils_1.rangeLimited({ num: _this.selectedIndex - 1, min: 0, max: _this.filteredValues.length - 1, loopAround: true });
            _this.stateChanged.emit({});
        };
        this.openOmniSearch = function (mode) {
            var oldMode = _this.mode;
            var oldRawFilterValue = _this.rawFilterValue;
            _this.mode = mode;
            var description = _this.modeDescriptions.filter(function (x) { return x.mode == mode; })[0];
            _this.rawFilterValue = description ? description.shortcut + '>' : '';
            if (_this.isShown && oldMode !== _this.mode && oldMode !== SearchMode.Unknown) {
                _this.rawFilterValue = _this.rawFilterValue + oldRawFilterValue.trim().substr(2);
            }
            _this.isShown = true;
            _this.newValue(_this.rawFilterValue);
            _this.setParentUiRawFilterValue(_this.rawFilterValue);
        };
        this.closeOmniSearch = function () {
            _this.isShown = false;
            _this.rawFilterValue = '';
            _this.stateChanged.emit({});
        };
        commands.esc.on(function () {
            _this.closeOmniSearch();
        });
        this.filePaths = state.getState().filePaths.filter(function (fp) { return fp.type == types.FilePathType.File; }).map(function (fp) { return fp.filePath; });
        state.subscribeSub(function (state) { return state.filePaths; }, function (filePaths) {
            _this.filePaths = filePaths.filter(function (fp) { return fp.type == types.FilePathType.File; }).map(function (fp) { return fp.filePath; });
            _this.updateIfUserIsSearching(SearchMode.File);
        });
        this.filePathsCompleted = state.getState().filePathsCompleted;
        state.subscribeSub(function (state) { return state.filePathsCompleted; }, function (filePathsCompleted) {
            _this.filePathsCompleted = filePathsCompleted;
            _this.updateIfUserIsSearching(SearchMode.File);
        });
        socketClient_1.server.availableProjects({}).then(function (res) {
            _this.availableProjects = res;
        });
        socketClient_1.cast.availableProjectsUpdated.on(function (res) {
            _this.availableProjects = res;
        });
        this.modeDescriptions = [
            {
                mode: SearchMode.File,
                description: 'Search for a File in the working directory',
                shortcut: 'f',
                searchingName: "Files"
            },
            {
                mode: SearchMode.Command,
                description: 'Search for a Command',
                shortcut: 'c',
                searchingName: "Commands"
            },
            {
                mode: SearchMode.Project,
                description: 'Search for a TypeScript Project to work on',
                shortcut: 'p',
                searchingName: "Projects"
            }
        ];
        this.modeDescriptions.forEach(function (md) { return _this.modeMap[md.shortcut] = md.mode; });
    }
    SearchState.prototype.renderResults = function () {
        var _this = this;
        var renderedResults = [];
        if (this.mode == SearchMode.File) {
            var fileList = this.filteredValues;
            renderedResults = this.createRenderedForList(fileList, function (filePath) {
                var renderedPath = selectListView_1.renderMatchedSegments(filePath, _this.parsedFilterValue);
                var renderedFileName = selectListView_1.renderMatchedSegments(utils_1.getFileName(filePath), _this.parsedFilterValue);
                return (React.createElement("div", null, React.createElement("div", null, renderedFileName), renderedPath));
            });
        }
        if (this.mode == SearchMode.Command) {
            var filtered = this.filteredValues;
            renderedResults = this.createRenderedForList(filtered, function (command) {
                var matched = selectListView_1.renderMatchedSegments(command.config.description, _this.parsedFilterValue);
                return (React.createElement("div", {style: csx.horizontal}, React.createElement("span", null, matched), React.createElement("span", {style: csx.flex}), command.config.keyboardShortcut &&
                    React.createElement("div", {style: commandKeyStrokeStyle}, commandShortcutToDisplayName(command.config.keyboardShortcut))));
            });
        }
        if (this.mode == SearchMode.Project) {
            var filteredProjects = this.filteredValues;
            renderedResults = this.createRenderedForList(filteredProjects, function (project) {
                var matched = selectListView_1.renderMatchedSegments(project.name, _this.parsedFilterValue);
                return (React.createElement("div", null, matched));
            });
        }
        if (this.mode == SearchMode.Unknown) {
            var filtered = this.filteredValues;
            renderedResults = this.createRenderedForList(filtered, function (modeDescription) {
                return (React.createElement("div", null, React.createElement("div", null, modeDescription.shortcut, '>'), modeDescription.description));
            });
        }
        return renderedResults;
    };
    SearchState.prototype.optionalMessage = function () {
        if (this.mode == SearchMode.File && !this.filePathsCompleted) {
            var messageStyle = {
                fontSize: '.6rem',
                textAlign: 'center',
                background: '#333',
                color: "#ddd",
                padding: '5px',
                fontWeight: 'bold',
                boxShadow: 'inset 0 0 6px black',
            };
            return (React.createElement("div", null, React.createElement("div", {style: messageStyle}, "Indexing (", this.filePaths.length, ")"), React.createElement(robocop_1.Robocop, null)));
        }
        return null;
    };
    SearchState.prototype.newValue = function (value) {
        this.rawFilterValue = value;
        this.parsedFilterValue = '';
        var trimmed = value.trim();
        if (trimmed.length > 1 && trimmed[1] == '>') {
            var mode = this.modeMap[trimmed[0]];
            if (!mode) {
                this.mode = SearchMode.Unknown;
                this.parsedFilterValue = trimmed;
            }
            else {
                this.mode = mode;
                this.parsedFilterValue = trimmed.substr(2);
            }
        }
        else {
            this.mode = SearchMode.Unknown;
            this.parsedFilterValue = trimmed;
        }
        if (this.mode == SearchMode.Unknown) {
            this.filteredValues = this.parsedFilterValue
                ? selectListView_1.getFilteredItems({ items: this.modeDescriptions, textify: function (c) { return c.description; }, filterValue: this.parsedFilterValue })
                : this.modeDescriptions;
        }
        if (this.mode == SearchMode.File) {
            this.filteredValues = fuzzaldrin_1.filter(this.filePaths, this.parsedFilterValue);
            this.filteredValues = this.filteredValues.slice(0, this.maxShowCount);
        }
        if (this.mode == SearchMode.Command) {
            this.filteredValues = this.parsedFilterValue
                ? selectListView_1.getFilteredItems({ items: this.commands, textify: function (c) { return c.config.description; }, filterValue: this.parsedFilterValue })
                : this.commands;
        }
        if (this.mode == SearchMode.Project) {
            this.filteredValues = this.parsedFilterValue
                ? selectListView_1.getFilteredItems({ items: this.availableProjects, textify: function (p) { return p.name; }, filterValue: this.parsedFilterValue })
                : this.availableProjects;
        }
        this.selectedIndex = 0;
        this.stateChanged.emit({});
    };
    SearchState.prototype.getSearchingName = function () {
        var _this = this;
        if (this.mode == SearchMode.Unknown) {
            return 'Modes';
        }
        var description = this.modeDescriptions.filter(function (x) { return x.mode == _this.mode; })[0];
        if (!description)
            return '';
        else
            return description.searchingName;
    };
    SearchState.prototype.createRenderedForList = function (items, itemToRender) {
        var _this = this;
        return items.map(function (item, index) {
            var rendered = itemToRender(item);
            var selected = _this.selectedIndex === index;
            var style = selected ? selectedStyle : {};
            var ref = selected && "selected";
            return (React.createElement("div", {key: index, style: [style, styles.padded2, styles.hand, listItemStyle], onClick: function () { return _this.choseIndex(index); }, ref: ref}, rendered));
        });
    };
    SearchState.prototype.updateIfUserIsSearching = function (mode) {
        if (this.mode == mode && this.isShown) {
            this.newValue(this.rawFilterValue);
        }
    };
    return SearchState;
})();
var commandKeyStrokeStyle = {
    fontSize: '.7rem',
    color: '#DDD',
    background: '#111',
    paddingLeft: '4px',
    paddingRight: '4px',
    border: '2px solid',
    borderRadius: '4px',
};
function commandShortcutToDisplayName(shortcut) {
    var basic = shortcut
        .replace(/mod/g, commands.modName)
        .replace(/alt/g, 'Alt')
        .replace(/shift/g, 'Shift');
    var onPlus = basic.split('+');
    onPlus[onPlus.length - 1] = onPlus[onPlus.length - 1].toUpperCase();
    return onPlus.join(' + ');
}
