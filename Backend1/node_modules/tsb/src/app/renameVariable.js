"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var React = require("react");
var ReactDOM = require("react-dom");
var csx = require('csx');
var ui_1 = require("./ui");
var ui = require("./ui");
var utils = require("../common/utils");
var styles = require("./styles/styles");
var uix = require("./uix");
var commands = require("./commands/commands");
var CodeMirror = require('codemirror');
var Modal = require('react-modal');
var socketClient_1 = require("../socket/socketClient");
var styles_1 = require("./styles/styles");
var codeEditor_1 = require("./codemirror/codeEditor");
var validationErrorStyle = {
    color: 'red',
    fontFamily: 'monospace',
    fontSize: '1.2rem',
    padding: '5px',
};
var summaryStyle = {
    padding: '5px',
    backgroundColor: '#222',
    color: '#CCC',
    fontSize: '.8rem',
};
var RenameVariable = (function (_super) {
    __extends(RenameVariable, _super);
    function RenameVariable(props) {
        var _this = this;
        _super.call(this, props);
        this.onChangeFilter = function (e) {
            var newText = ReactDOM.findDOMNode(_this.refs.mainInput).value;
            if (newText.replace(/\s/g, '') !== newText.trim()) {
                _this.setState({ invalidMessage: 'The new variable must not contain a space' });
            }
            else if (!newText.trim()) {
                _this.setState({ invalidMessage: 'Press esc to abort rename' });
            }
            else {
                _this.setState({ invalidMessage: '' });
            }
        };
        this.onChangeSelected = function (event) {
            var keyStates = ui.getKeyStates(event);
            if (keyStates.up || keyStates.tabPrevious) {
                event.preventDefault();
                var selectedIndex = utils.rangeLimited({ num: _this.state.selectedIndex - 1, min: 0, max: _this.state.flattened.length - 1, loopAround: true });
                _this.setState({ selectedIndex: selectedIndex });
            }
            if (keyStates.down || keyStates.tabNext) {
                event.preventDefault();
                var selectedIndex = utils.rangeLimited({ num: _this.state.selectedIndex + 1, min: 0, max: _this.state.flattened.length - 1, loopAround: true });
                _this.setState({ selectedIndex: selectedIndex });
            }
            if (keyStates.enter) {
                event.preventDefault();
                var newText = ReactDOM.findDOMNode(_this.refs.mainInput).value.trim();
                var refactorings = {};
                Object.keys(_this.props.info.locations).map(function (filePath) {
                    refactorings[filePath] = [];
                    var forPath = refactorings[filePath];
                    _this.props.info.locations[filePath].forEach(function (loc) {
                        var refactoring = {
                            filePath: filePath,
                            span: loc,
                            newText: newText
                        };
                        forPath.push(refactoring);
                    });
                });
                uix.API.applyRefactorings(refactorings);
                setTimeout(function () { _this.unmount(); });
            }
        };
        this.selectAndRefocus = function (index) {
            _this.setState({ selectedIndex: index });
            _this.focus();
        };
        this.focus = function () {
            var input = ReactDOM.findDOMNode(_this.refs.mainInput);
            input.focus();
        };
        var flattended = utils.selectMany(Object.keys(props.info.locations).map(function (filePath) {
            var refs = props.info.locations[filePath].slice().reverse();
            return refs.map(function (preview, i) {
                return {
                    filePath: filePath,
                    preview: preview,
                    indexForFilePath: i + 1,
                    totalForFilePath: refs.length,
                };
            });
        }));
        this.state = {
            selectedIndex: 0,
            flattened: flattended
        };
    }
    RenameVariable.prototype.componentDidMount = function () {
        var _this = this;
        this.disposible.add(commands.esc.on(function () {
            _this.unmount();
        }));
        setTimeout(function () {
            _this.focus();
            var input = ReactDOM.findDOMNode(_this.refs.mainInput);
            var len = input.value.length;
            input.setSelectionRange(0, len);
        });
    };
    RenameVariable.prototype.componentDidUpdate = function () {
        var _this = this;
        setTimeout(function () {
            var selected = ReactDOM.findDOMNode(_this.refs.selectedTabTitle);
            if (selected) {
                selected.scrollIntoViewIfNeeded(false);
            }
        });
    };
    RenameVariable.prototype.render = function () {
        var _this = this;
        var selectedPreview = this.state.flattened[this.state.selectedIndex];
        var filePathsRendered = this.state.flattened.map(function (item, i) {
            var selected = i == _this.state.selectedIndex;
            var active = selected ? styles.tabHeaderActive : {};
            var ref = selected && "selectedTabTitle";
            return (React.createElement("div", {ref: ref, key: item.filePath + i, style: [styles.tabHeader, active, { overflow: 'auto' }], onClick: function () { return _this.selectAndRefocus(i); }}, React.createElement("div", null, utils.getFileName(item.filePath), " (", item.indexForFilePath, " of ", item.totalForFilePath, ")")));
        });
        var previewRendered = React.createElement(codeEditor_1.CodeEditor, {key: this.state.selectedIndex, filePath: selectedPreview.filePath, readOnly: "nocursor", preview: selectedPreview.preview});
        return (React.createElement(Modal, {isOpen: true, onRequestClose: this.unmount}, React.createElement("div", {style: [csx.vertical, csx.flex]}, React.createElement("div", {style: [csx.horizontal]}, React.createElement("h4", null, "Rename"), React.createElement("div", {style: [csx.flex]}), React.createElement("div", {style: { fontSize: '0.9rem', color: 'grey' }}, React.createElement("code", {style: styles_1.modal.keyStrokeStyle}, "Esc"), " to exit ", React.createElement("code", {style: styles_1.modal.keyStrokeStyle}, "Enter"), " to select", ' ', React.createElement("code", {style: styles_1.modal.keyStrokeStyle}, "Up / Down"), " to see usages")), React.createElement("div", {style: [styles.padded1TopBottom, csx.vertical]}, React.createElement("input", {defaultValue: this.props.info.displayName, style: styles.modal.inputStyle, type: "text", ref: "mainInput", placeholder: "Filter", onChange: this.onChangeFilter, onKeyDown: this.onChangeSelected})), this.state.invalidMessage &&
            React.createElement("div", {style: validationErrorStyle}, this.state.invalidMessage), React.createElement("div", {style: summaryStyle}, this.state.flattened.length, " usages, ", this.props.alreadyOpenFilePaths.length, " files open,  ", this.props.currentlyClosedFilePaths.length, " files closed"), React.createElement("div", {style: [csx.horizontal, csx.flex, { overflow: 'hidden' }]}, React.createElement("div", {style: { width: '200px', overflow: 'auto' }}, filePathsRendered), React.createElement("div", {style: [csx.flex, csx.flexRoot, styles.modal.previewContainerStyle]}, previewRendered)))));
    };
    RenameVariable = __decorate([
        ui.Radium, 
        __metadata('design:paramtypes', [Object])
    ], RenameVariable);
    return RenameVariable;
})(ui_1.BaseComponent);
exports.RenameVariable = RenameVariable;
CodeMirror.commands[commands.additionalEditorCommands.renameVariable] = function (editor) {
    var cursor = editor.getDoc().getCursor();
    var filePath = editor.filePath;
    var position = editor.getDoc().indexFromPos(cursor);
    socketClient_1.server.getRenameInfo({ filePath: filePath, position: position }).then(function (res) {
        if (!res.canRename) {
            ui.notifyInfoNormalDisappear("Rename not available at cursor location");
        }
        else {
            var filePaths = Object.keys(res.locations);
            if (filePaths.length == 1
                && filePaths[0] == filePath
                && res.locations[filePath].length < 5) {
                selectName(editor, res.locations[filePath]);
            }
            else {
                var _a = uix.API.getClosedVsOpenFilePaths(filePaths), alreadyOpenFilePaths = _a.alreadyOpenFilePaths, currentlyClosedFilePaths = _a.currentlyClosedFilePaths;
                var node = document.createElement('div');
                ReactDOM.render(React.createElement(RenameVariable, {info: res, alreadyOpenFilePaths: alreadyOpenFilePaths, currentlyClosedFilePaths: currentlyClosedFilePaths}), node);
            }
        }
    });
};
function selectName(cm, locations) {
    var ranges = [], cur = 0;
    var doc = cm.getDoc();
    var curPos = doc.getCursor();
    for (var i = 0; i < locations.length; i++) {
        var ref = locations[i];
        var from = doc.posFromIndex(ref.start);
        var to = doc.posFromIndex(ref.start + ref.length);
        ranges.push({ anchor: from, head: to });
        if (CodeMirror.cmpPos(curPos, from) >= 0 && CodeMirror.cmpPos(curPos, to) <= 0)
            cur = ranges.length - 1;
    }
    cm.setSelections(ranges, cur);
}
