"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Mousetrap = require("mousetrap");
require("mousetrap/plugins/global-bind/mousetrap-global-bind");
var events = require("../../common/events");
var utils = require("../../common/utils");
(function (CommandContext) {
    CommandContext[CommandContext["Global"] = 0] = "Global";
    CommandContext[CommandContext["Editor"] = 1] = "Editor";
    CommandContext[CommandContext["TreeView"] = 2] = "TreeView";
})(exports.CommandContext || (exports.CommandContext = {}));
var CommandContext = exports.CommandContext;
exports.commandRegistry = [];
var UICommand = (function (_super) {
    __extends(UICommand, _super);
    function UICommand(config) {
        _super.call(this);
        this.config = config;
        exports.commandRegistry.push(this);
    }
    return UICommand;
})(events.TypedEvent);
exports.UICommand = UICommand;
exports.esc = new UICommand({
    keyboardShortcut: 'esc',
    description: "Close any open dialogs and focus back to any open tab",
    context: CommandContext.Global,
});
exports.gotoNext = new UICommand({
    keyboardShortcut: 'f8',
    description: "Active List: Goto next position",
    context: CommandContext.Global,
});
exports.gotoPrevious = new UICommand({
    keyboardShortcut: 'shift+f8',
    description: "Active List: Goto previous position",
    context: CommandContext.Global,
});
exports.nextTab = new UICommand({
    keyboardShortcut: 'alt+k',
    description: "Tabs: Focus on the Next",
    context: CommandContext.Global,
});
exports.prevTab = new UICommand({
    keyboardShortcut: 'alt+j',
    description: "Tabs: Focus on the Previous",
    context: CommandContext.Global,
});
exports.closeTab = new UICommand({
    keyboardShortcut: 'alt+w',
    description: "Tabs: Close current tab",
    context: CommandContext.Global,
});
exports.undoCloseTab = new UICommand({
    keyboardShortcut: 'shift+alt+w',
    description: "Tabs: Undo close tab",
    context: CommandContext.Global,
});
exports.saveTab = new UICommand({
    keyboardShortcut: 'mod+s',
    description: "Tabs: Save current tab",
    context: CommandContext.Global,
});
exports.closeOtherTabs = new UICommand({
    description: "Tabs: Close other tabs",
    context: CommandContext.Global,
});
exports.gotoTab1 = new UICommand({
    keyboardShortcut: 'mod+1',
    description: "Tabs: Goto Tab 1",
    context: CommandContext.Global,
});
exports.gotoTab2 = new UICommand({
    keyboardShortcut: 'mod+2',
    description: "Tabs: Goto Tab 2",
    context: CommandContext.Global,
});
exports.gotoTab3 = new UICommand({
    keyboardShortcut: 'mod+3',
    description: "Tabs: Goto Tab 3",
    context: CommandContext.Global,
});
exports.gotoTab4 = new UICommand({
    keyboardShortcut: 'mod+4',
    description: "Tabs: Goto Tab 4",
    context: CommandContext.Global,
});
exports.gotoTab5 = new UICommand({
    keyboardShortcut: 'mod+5',
    description: "Tabs: Goto Tab 5",
    context: CommandContext.Global,
});
exports.gotoTab6 = new UICommand({
    keyboardShortcut: 'mod+6',
    description: "Tabs: Goto Tab 6",
    context: CommandContext.Global,
});
exports.gotoTab7 = new UICommand({
    keyboardShortcut: 'mod+7',
    description: "Tabs: Goto Tab 7",
    context: CommandContext.Global,
});
exports.gotoTab8 = new UICommand({
    keyboardShortcut: 'mod+8',
    description: "Tabs: Goto Tab 8",
    context: CommandContext.Global,
});
exports.gotoTab9 = new UICommand({
    keyboardShortcut: 'mod+9',
    description: "Tabs: Goto Tab 9",
    context: CommandContext.Global,
});
exports.omniFindFile = new UICommand({
    keyboardShortcut: 'mod+p',
    description: "Find a file in the working directory",
    context: CommandContext.Global,
});
exports.omniFindCommand = new UICommand({
    keyboardShortcut: 'mod+shift+p',
    description: "Find a command",
    context: CommandContext.Global,
});
exports.omniSelectProject = new UICommand({
    keyboardShortcut: 'alt+shift+p',
    description: "Find and set active project",
    context: CommandContext.Global,
});
exports.findAndReplace = new UICommand({
    keyboardShortcut: 'mod+f',
    description: "Show find and replace dialog",
    context: CommandContext.Global,
});
exports.findNext = new UICommand({
    keyboardShortcut: 'f3',
    description: "Find the next search result",
    context: CommandContext.Global,
});
exports.findPrevious = new UICommand({
    keyboardShortcut: 'shift+f3',
    description: "Find the previous search result",
    context: CommandContext.Global,
});
exports.replaceNext = new events.TypedEvent();
exports.replaceAll = new events.TypedEvent();
exports.toggleMessagePanel = new UICommand({
    keyboardShortcut: 'mod+;',
    description: "Toggle Message Panel",
    context: CommandContext.Global,
});
exports.cycleMessagesPanel = new UICommand({
    keyboardShortcut: 'mod+shift+;',
    description: "Cycle Message Panel",
    context: CommandContext.Global,
});
exports.toggleDoctor = new UICommand({
    keyboardShortcut: "mod+'",
    description: "Editor: Toggle Doctor",
    context: CommandContext.Global,
});
exports.previousCursorLocation = new UICommand({
    keyboardShortcut: "mod+u",
    description: "Cursor: Previous Cursor Location",
    context: CommandContext.Global,
});
exports.nextCursorLocation = new UICommand({
    keyboardShortcut: "mod+shift+u",
    description: "Cursor: Next Cursor Location",
    context: CommandContext.Global,
});
exports.treeViewToggle = new UICommand({
    keyboardShortcut: 'mod+\\',
    description: "Tree View: Toggle",
    context: CommandContext.Global,
});
exports.treeViewRevealActiveFile = new UICommand({
    keyboardShortcut: 'mod+shift+\\',
    description: "Tree View: Reveal Active File",
    context: CommandContext.Global,
});
exports.treeViewFocus = new UICommand({
    keyboardShortcut: 'mod+0',
    description: "Tree View: Focus",
    context: CommandContext.Global,
});
exports.treeAddFile = new UICommand({
    keyboardShortcut: 'mod+a',
    description: "Tree View: Add File",
    context: CommandContext.TreeView,
});
exports.treeDuplicateFile = new UICommand({
    keyboardShortcut: 'mod+d',
    description: "Tree View: Duplicate File|Folder",
    context: CommandContext.TreeView,
});
exports.treeMoveFile = new UICommand({
    keyboardShortcut: 'mod+m',
    description: "Tree View: Move File|Folder",
    context: CommandContext.TreeView,
});
exports.treeDeleteFile = new UICommand({
    keyboardShortcut: 'del',
    description: "Tree View: Delete File|Folder",
    context: CommandContext.TreeView,
});
exports.doOpenFile = new events.TypedEvent();
exports.doOpenOrFocusFile = new events.TypedEvent();
exports.openFileFromDisk = new UICommand({
    keyboardShortcut: 'mod+o',
    description: 'Open a file present on server disk',
    context: CommandContext.Global,
});
exports.doOpenOrFocusTab = new events.TypedEvent();
function register() {
    exports.commandRegistry.forEach(function (c) {
        if (c.config.context == CommandContext.Global
            && c.config.keyboardShortcut) {
            Mousetrap.bindGlobal(c.config.keyboardShortcut, function () {
                c.emit({});
                return false;
            });
        }
    });
    Mousetrap.bindGlobal('mod+h', function () {
        exports.findAndReplace.emit({});
        return false;
    });
}
exports.register = register;
exports.ios = /AppleWebKit/.test(navigator.userAgent) && /Mobile\/\w+/.test(navigator.userAgent);
exports.mac = exports.ios || /Mac/.test(navigator.platform);
exports.windows = /win/i.test(navigator.platform);
exports.modName = exports.mac ? 'âŒ˜' : 'Ctrl';
var mod = exports.mac ? 'Cmd' : 'Ctrl';
exports.additionalEditorCommands = {
    renameVariable: '',
    gotoDefinition: '',
    findReferences: '',
    jumpy: '',
    format: '',
    toggleBlaster: '',
};
utils.stringEnum(exports.additionalEditorCommands);
var CodeMirror = require('codemirror');
require('codemirror/keymap/sublime');
var keyMap = CodeMirror.keyMap;
var basicMap = keyMap.basic;
var defaultMap = keyMap.default;
var sublimeMap = keyMap.sublime;
sublimeMap[(mod + "-Space")] = "autocomplete";
sublimeMap["F2"] = exports.additionalEditorCommands.renameVariable;
sublimeMap[(mod + "-B")] = exports.additionalEditorCommands.gotoDefinition;
sublimeMap["Shift-Enter"] = exports.additionalEditorCommands.jumpy;
sublimeMap[("Shift-" + mod + "-B")] = exports.additionalEditorCommands.findReferences;
sublimeMap[(mod + "-Alt-L")] = exports.additionalEditorCommands.format;
sublimeMap[(mod + "-Alt-O")] = exports.additionalEditorCommands.toggleBlaster;
delete defaultMap[(mod + "-U")];
delete defaultMap[("Shift-" + mod + "-U")];
delete sublimeMap['Esc'];
var unsupportedNames = utils.createMap([
    '...',
    'replace',
    'find',
    'findPrev',
    'findNext',
    'findUnder',
    'findUnderPrevious',
    'indentAuto',
    'replaceAll',
    'transposeChars',
    "undoSelection",
    "redoSelection",
    "nextBookmark",
    "prevBookmark",
    "toggleBookmark",
    "clearBookmarks",
    "selectBookmarks",
    "delLineLeft",
    "setSublimeMark",
    "setSublimeMark",
    "selectToSublimeMark",
    "deleteToSublimeMark",
    "swapWithSublimeMark",
    "sublimeYank",
    "unfoldAll",
    "findIncremental",
    "findIncrementalReverse",
    "save",
]);
var alreadyAddedCommand = {};
var alreadyAddedShortcut = {};
function addEditorMapToCommands(map) {
    var listed = Object.keys(map).map(function (k) { return ({ shortcut: k, commandName: map[k] }); });
    for (var _i = 0, listed_1 = listed; _i < listed_1.length; _i++) {
        var item = listed_1[_i];
        if (item.shortcut == 'fallthrough') {
            continue;
        }
        if (unsupportedNames[item.commandName]) {
            continue;
        }
        if (alreadyAddedCommand[item.commandName]) {
            continue;
        }
        alreadyAddedCommand[item.commandName] = true;
        if (alreadyAddedShortcut[item.shortcut]) {
            continue;
        }
        alreadyAddedShortcut[item.shortcut] = true;
        var shortcut = item.shortcut
            .replace(/-/g, '+');
        var commandDisplayName = item.commandName
            .split(/(?=[A-Z])/)
            .map(function (x) { return x[0].toUpperCase() + x.substr(1); })
            .join(' ');
        new UICommand({
            keyboardShortcut: shortcut,
            description: "Editor: " + commandDisplayName,
            context: CommandContext.Editor,
            editorCommandName: item.commandName,
        });
    }
}
addEditorMapToCommands(sublimeMap);
addEditorMapToCommands(defaultMap);
addEditorMapToCommands(basicMap);
