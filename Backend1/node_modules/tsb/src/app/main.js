"use strict";
var root_1 = require("./root");
var commands = require("./commands/commands");
var React = require("react");
var ReactDOM = require("react-dom");
var react_redux_1 = require('react-redux');
var state = require("./state/state");
var state_1 = require("./state/state");
var ui = require("./ui");
var socketClient_1 = require("../socket/socketClient");
var Modal = require('react-modal');
var preventBackspaceNav_1 = require("./utils/preventBackspaceNav");
preventBackspaceNav_1.preventBackspaceNav();
require('normalize.css');
var Clipboard = require('clipboard/dist/clipboard.min');
new Clipboard('[data-clipboard-text]');
require('hint.css/hint.css');
require('font-awesome/css/font-awesome.css');
require('ntypescript');
document.addEventListener('DOMContentLoaded', function () {
    var appElement = document.getElementById('app');
    Modal.setAppElement(appElement);
    ReactDOM.render(React.createElement(react_redux_1.Provider, {store: state_1.store}, React.createElement(root_1.Root, null)), appElement);
    commands.register();
    socketClient_1.server.getErrors({}).then(function (errorsByFilePath) {
        state.setErrorsByFilePath(errorsByFilePath);
    });
    socketClient_1.cast.errorsUpdated.on(function (errorsByFilePath) {
        state.setErrorsByFilePath(errorsByFilePath);
    });
    socketClient_1.pendingRequestsChanged.on(function (r) {
        state.setPendingRequests(r.pending);
    });
    socketClient_1.connectionStatusChanged.on(function (r) {
        state.setSocketConnected(r.connected);
    });
    socketClient_1.server.filePaths({}).then(function (res) {
        res.completed
            ? state.setCompleteFilePaths(res.filePaths)
            : state.setPartialFilePaths(res.filePaths);
    });
    socketClient_1.cast.filePathsCompleted.on(function (update) {
        state.setCompleteFilePaths(update.filePaths);
    });
    socketClient_1.cast.filePathsPartial.on(function (update) {
        state.setPartialFilePaths(update.filePaths);
    });
    commands.toggleDoctor.on(function () {
        if (!state.inActiveProject(state.getSelectedFilePath())) {
            ui.notifyWarningNormalDisappear('Doctor is only available for files in active project');
            return;
        }
        state.toggleDoctor({});
    });
});
