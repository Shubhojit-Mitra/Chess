"use strict";
var ui = require("./ui");
var state = require("./state/state");
var commands = require("./commands/commands");
var utils = require("../common/utils");
commands.gotoNext.on(function () {
    gotoNext();
});
commands.gotoPrevious.on(function () {
    gotoPrevious();
});
var errorsInOpenFiles = { members: [] };
var buildOutput = { members: [] };
var referencesOutput = { members: [] };
state.subscribeSub(function (state) { return state.errorsByFilePath; }, function (errorsByFilePath) {
    var errorsFlattened = utils.selectMany(Object.keys(errorsByFilePath).map(function (x) { return errorsByFilePath[x]; }));
    errorsInOpenFiles.members = errorsFlattened.map(function (x) {
        return { filePath: x.filePath, line: x.from.line, col: x.from.ch };
    });
});
function gotoError(error) {
    commands.doOpenOrFocusFile.emit({ filePath: error.filePath, position: error.from });
    errorsInOpenFiles.lastIndex = indexOf(errorsInOpenFiles.members, function (member) {
        return member.filePath == error.filePath && member.line == error.from.line && member.col == error.from.ch;
    });
}
exports.gotoError = gotoError;
var activeList = errorsInOpenFiles;
function gotoItemInActiveList(index) {
    var member = activeList.members[index];
    activeList.lastIndex = index;
    commands.doOpenOrFocusFile.emit({ filePath: member.filePath, position: { line: member.line, ch: member.col } });
}
function findCurrentIndexInList() {
    if (!activeList.members.length) {
        ui.notifyInfoNormalDisappear('No members in active go-to list');
        return -1;
    }
    if (!activeList.lastIndex || activeList.lastIndex == -1)
        return 0;
    if (activeList.lastIndex >= activeList.members.length)
        return activeList.members.length - 1;
    return activeList.lastIndex;
}
function gotoNext() {
    var currentIndex = findCurrentIndexInList();
    if (currentIndex == -1)
        return;
    var nextIndex = currentIndex + 1;
    if (nextIndex == activeList.members.length) {
        nextIndex = 0;
    }
    gotoItemInActiveList(nextIndex);
}
exports.gotoNext = gotoNext;
function gotoPrevious() {
    var currentIndex = findCurrentIndexInList();
    if (currentIndex == -1)
        return;
    var previousIndex = currentIndex - 1;
    if (previousIndex == -1) {
        previousIndex = activeList.members.length - 1;
    }
    gotoItemInActiveList(previousIndex);
}
exports.gotoPrevious = gotoPrevious;
function indexOf(items, filter) {
    for (var i = 0; i < items.length; i++) {
        if (filter(items[i])) {
            return i;
        }
    }
    return -1;
}
