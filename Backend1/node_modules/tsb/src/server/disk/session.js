"use strict";
var types = require("../../common/types");
var json = require("../../common/json");
var fsu = require("../utils/fsu");
var utils = require("../../common/utils");
var workingDir = require("./workingDir");
var commandLine = require("../commandLine");
var sessionFile = types.cacheDir + '/sessionV2.json';
function getDefaultOrNewSession() {
    var session = null;
    var commandLineTabs = getCommandLineTabs();
    if (fsu.existsSync(sessionFile) && !commandLine.getOptions().safe) {
        var contents = json.parse(fsu.readFile(sessionFile));
        if (contents.data && contents.data.lastUsed) {
            session = contents.data;
        }
    }
    if (!session) {
        session = {
            openTabs: [],
            lastUsed: new Date().getTime(),
        };
    }
    if (commandLineTabs.length) {
        session.openTabs = session.openTabs.concat(commandLineTabs);
        writeDiskSession(session);
    }
    return session;
}
exports.getDefaultOrNewSession = getDefaultOrNewSession;
function getCommandLineTabs() {
    var files = commandLine.getOptions().filePaths;
    var tabs = files
        .map(function (file) { return utils.getUrlFromFilePathAndProtocol({ protocol: 'file', filePath: file }); })
        .map(function (url) { return workingDir.makeRelativeUrl(url); })
        .map(function (relativeUrl) { return ({ relativeUrl: relativeUrl }); });
    commandLine.getOptions().filePaths = [];
    return tabs;
}
function uiToDiskTab(uiTab) {
    var relativeUrl = workingDir.makeRelativeUrl(uiTab.url);
    return {
        relativeUrl: relativeUrl
    };
}
function diskTabToUITab(diskTab) {
    var url = workingDir.makeAbsoluteUrl(diskTab.relativeUrl);
    return {
        url: url
    };
}
function writeDiskSession(session) {
    session.lastUsed = new Date().getTime();
    fsu.writeFile(sessionFile, json.stringify(session));
}
function setTsconfigPath(tsconfigFilePath) {
    var session = getDefaultOrNewSession();
    session.relativePathToTsconfig = workingDir.makeRelative(tsconfigFilePath);
    writeDiskSession(session);
}
exports.setTsconfigPath = setTsconfigPath;
function setOpenUITabs(tabs) {
    var session = getDefaultOrNewSession();
    session.openTabs = tabs.map(uiToDiskTab);
    writeDiskSession(session);
}
exports.setOpenUITabs = setOpenUITabs;
function getOpenUITabs() {
    var session = getDefaultOrNewSession();
    return { openTabs: session.openTabs.map(diskTabToUITab) };
}
exports.getOpenUITabs = getOpenUITabs;
