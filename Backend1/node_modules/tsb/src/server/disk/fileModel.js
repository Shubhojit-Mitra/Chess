"use strict";
var utils = require("../../common/utils");
var os = require('os');
var fsu = require('../utils/fsu');
var chokidar = require('chokidar');
var events_1 = require("../../common/events");
var FileModel = (function () {
    function FileModel(config) {
        var _this = this;
        this.config = config;
        this.text = [];
        this.savedText = [];
        this.onSavedFileChangedOnDisk = new events_1.TypedEvent();
        this.didEdit = new events_1.TypedEvent();
        this.didStatusChange = new events_1.TypedEvent();
        this.fileListener = function (eventName, path) {
            var contents = fsu.readFile(_this.config.filePath);
            var text = _this.splitlines(contents);
            if (_this.saved()) {
                _this.text = text;
                _this.savedText = _this.text.slice();
                _this.onSavedFileChangedOnDisk.emit({ contents: _this.getContents() });
            }
        };
        this.fsWatcher = null;
        var contents = fsu.readFile(config.filePath);
        this.newLine = this.getExpectedNewline(contents);
        this.text = this.splitlines(contents);
        this.savedText = this.text.slice();
        this.watchFile();
    }
    FileModel.prototype.getContents = function () {
        return this.text.join('\n');
    };
    FileModel.prototype.edit = function (codeEdit) {
        var lastLine = this.text.length - 1;
        var beforeLines = this.text.slice(0, codeEdit.from.line);
        var afterLines = codeEdit.to.line === lastLine ? [] : this.text.slice(codeEdit.to.line + 1, this.text.length);
        var lines = this.text.slice(codeEdit.from.line, codeEdit.to.line + 1);
        var content = lines.join('\n');
        var contentBefore = content.substr(0, codeEdit.from.ch);
        var contentAfter = lines[lines.length - 1].substr(codeEdit.to.ch);
        content = contentBefore + codeEdit.newText + contentAfter;
        lines = content.split('\n');
        this.text = beforeLines.concat(lines).concat(afterLines);
        var saved = this.saved();
        this.didEdit.emit({ codeEdit: codeEdit });
        this.didStatusChange.emit({ saved: saved });
        return { saved: saved };
    };
    FileModel.prototype.save = function () {
        var contents = this.text.join(this.newLine);
        fsu.writeFile(this.config.filePath, contents);
        this.savedText = this.text.slice();
        this.didStatusChange.emit({ saved: true });
    };
    FileModel.prototype.saved = function () {
        return utils.arraysEqual(this.text, this.savedText);
    };
    FileModel.prototype.watchFile = function () {
        this.fsWatcher = chokidar.watch(this.config.filePath, { ignoreInitial: true });
        this.fsWatcher.on('all', this.fileListener);
    };
    FileModel.prototype.unwatchFile = function () {
        this.fsWatcher.close();
        this.fsWatcher = null;
    };
    FileModel.prototype.splitlines = function (string) { return string.split(/\r\n?|\n/); };
    ;
    FileModel.prototype.getExpectedNewline = function (str) {
        var CR = str.match(/\r/g);
        var CRCount = CR ? CR.length : 0;
        var CRLF = str.match(/\r\n/g);
        var CRLFCount = CRLF ? CRLF.length : 0;
        return CRCount == 0
            ? os.EOL
            : CRCount > 1.5 * CRLFCount
                ? '\r'
                : '\r\n';
    };
    return FileModel;
})();
exports.FileModel = FileModel;
