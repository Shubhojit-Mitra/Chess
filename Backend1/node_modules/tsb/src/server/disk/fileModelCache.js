"use strict";
var fileModel_1 = require("./fileModel");
var events_1 = require("../../common/events");
var fsu = require("../utils/fsu");
exports.savedFileChangedOnDisk = new events_1.TypedEvent();
exports.didEdit = new events_1.TypedEvent();
exports.didStatusChange = new events_1.TypedEvent();
var openFiles = [];
function getOpenFile(filePath) {
    if (openFiles.some(function (f) { return f.config.filePath == filePath; })) {
        return openFiles.filter(function (f) { return f.config.filePath == filePath; })[0];
    }
}
exports.getOpenFile = getOpenFile;
function getOrCreateOpenFile(filePath, autoCreate) {
    if (autoCreate === void 0) { autoCreate = false; }
    var file = getOpenFile(filePath);
    if (!file) {
        if (!fsu.existsSync(filePath) && autoCreate) {
            fsu.writeFile(filePath, '');
        }
        file = new fileModel_1.FileModel({
            filePath: filePath
        });
        file.onSavedFileChangedOnDisk.on(function (evt) {
            exports.savedFileChangedOnDisk.emit({ filePath: filePath, contents: evt.contents });
        });
        file.didEdit.on(function (evt) {
            exports.didEdit.emit({ filePath: filePath, edit: evt.codeEdit });
        });
        file.didStatusChange.on(function (evt) {
            exports.didStatusChange.emit({ filePath: filePath, saved: evt.saved });
        });
        openFiles.push(file);
    }
    return file;
}
exports.getOrCreateOpenFile = getOrCreateOpenFile;
function closeOpenFile(filePath) {
    var file = getOpenFile(filePath);
    if (file) {
        file.save();
    }
}
exports.closeOpenFile = closeOpenFile;
function getOpenFiles() {
    return openFiles;
}
exports.getOpenFiles = getOpenFiles;
function isFileOpen(filePath) {
    return !!getOpenFile(filePath);
}
exports.isFileOpen = isFileOpen;
