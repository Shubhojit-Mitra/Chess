"use strict";
var events_1 = require("../../common/events");
var utils_1 = require("../../common/utils");
var equal = require('deep-equal');
exports.errorsUpdated = new events_1.TypedEvent();
var _errorsByFilePath = {};
var sendErrors = utils_1.debounce(function () {
    var limitedCopy = {};
    var total = 0;
    for (var filePath in _errorsByFilePath) {
        var errors = _errorsByFilePath[filePath];
        if (errors.length > 50)
            errors = errors.slice(0, 50);
        limitedCopy[filePath] = errors;
        total += errors.length;
        if (total > 200)
            break;
    }
    exports.errorsUpdated.emit(limitedCopy);
}, 250);
function setErrorsByFilePaths(filePaths, errors) {
    var somethingNew = false;
    var errorsByFile = utils_1.createMapByKey(errors, function (e) { return e.filePath; });
    for (var filePath in errorsByFile) {
        if (!equal(_errorsByFilePath[filePath], errorsByFile[filePath])) {
            somethingNew = true;
            _errorsByFilePath[filePath] = errorsByFile[filePath];
        }
    }
    for (var _i = 0, filePaths_1 = filePaths; _i < filePaths_1.length; _i++) {
        var filePath = filePaths_1[_i];
        if (!errorsByFile[filePath] && (_errorsByFilePath[filePath] && _errorsByFilePath[filePath].length)) {
            somethingNew = true;
            _errorsByFilePath[filePath] = [];
        }
    }
    if (somethingNew) {
        sendErrors();
    }
}
exports.setErrorsByFilePaths = setErrorsByFilePaths;
function getErrors() {
    return _errorsByFilePath;
}
exports.getErrors = getErrors;
function clearErrors() {
    _errorsByFilePath = {};
    sendErrors();
}
exports.clearErrors = clearErrors;
function clearErrorsForFilePath(filePath) {
    _errorsByFilePath[filePath] = [];
    sendErrors();
}
exports.clearErrorsForFilePath = clearErrorsForFilePath;
