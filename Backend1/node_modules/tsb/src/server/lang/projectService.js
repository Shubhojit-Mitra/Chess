"use strict";
var activeProject = require("./activeProject");
var getProject = activeProject.GetProject.ifCurrentOrErrorOut;
var utils = require("../../common/utils");
var resolve = utils.resolve;
var fuzzaldrin = require('fuzzaldrin');
function getCompletionsAtPosition(query) {
    var filePath = query.filePath, position = query.position, prefix = query.prefix;
    var project = getProject(query.filePath);
    var completions = project.languageService.getCompletionsAtPosition(filePath, position);
    var completionList = completions ? completions.entries.filter(function (x) { return !!x; }) : [];
    var endsInPunctuation = utils.prefixEndsInPunctuation(prefix);
    if (prefix.length && prefix.trim().length && !endsInPunctuation) {
        completionList = fuzzaldrin.filter(completionList, prefix.trim(), { key: 'name' });
    }
    var maxSuggestions = 50;
    var maxDocComments = 10;
    if (completionList.length > maxSuggestions)
        completionList = completionList.slice(0, maxSuggestions);
    function docComment(c) {
        var completionDetails = project.languageService.getCompletionEntryDetails(filePath, position, c.name);
        var display;
        if (c.kind == "method" || c.kind == "function" || c.kind == "property") {
            var parts = completionDetails.displayParts || [];
            if (parts.length > 3) {
                parts = parts.splice(3);
            }
            display = ts.displayPartsToString(parts);
        }
        else {
            display = '';
        }
        display = display.trim();
        var comment = ts.displayPartsToString(completionDetails.documentation || []);
        return { display: display, comment: comment };
    }
    var completionsToReturn = completionList.map(function (c, index) {
        if (index < maxDocComments) {
            var details = docComment(c);
        }
        else {
            details = {
                display: '',
                comment: ''
            };
        }
        return {
            name: c.name,
            kind: c.kind,
            comment: details.comment,
            display: details.display
        };
    });
    if (query.prefix == '(') {
        var signatures = project.languageService.getSignatureHelpItems(query.filePath, query.position);
        if (signatures && signatures.items) {
            signatures.items.forEach(function (item) {
                var snippet = item.parameters.map(function (p, i) {
                    var display = '${' + (i + 1) + ':' + ts.displayPartsToString(p.displayParts) + '}';
                    if (i === signatures.argumentIndex) {
                        return display;
                    }
                    return display;
                }).join(ts.displayPartsToString(item.separatorDisplayParts));
                var label = ts.displayPartsToString(item.prefixDisplayParts)
                    + snippet
                    + ts.displayPartsToString(item.suffixDisplayParts);
                completionsToReturn.unshift({ snippet: snippet });
            });
        }
    }
    return resolve({
        completions: completionsToReturn,
        endsInPunctuation: endsInPunctuation
    });
}
exports.getCompletionsAtPosition = getCompletionsAtPosition;
function quickInfo(query) {
    var project = getProject(query.filePath);
    if (!project.includesSourceFile(query.filePath)) {
        return Promise.resolve({ valid: false });
    }
    var info = project.languageService.getQuickInfoAtPosition(query.filePath, query.position);
    if (!info) {
        return Promise.resolve({ valid: false });
    }
    else {
        return resolve({
            valid: true,
            name: ts.displayPartsToString(info.displayParts || []),
            comment: ts.displayPartsToString(info.documentation || [])
        });
    }
}
exports.quickInfo = quickInfo;
function getRenameInfo(query) {
    var project = getProject(query.filePath);
    var findInStrings = false, findInComments = false;
    var info = project.languageService.getRenameInfo(query.filePath, query.position);
    if (info && info.canRename) {
        var locations = {};
        project.languageService.findRenameLocations(query.filePath, query.position, findInStrings, findInComments)
            .forEach(function (loc) {
            if (!locations[loc.fileName])
                locations[loc.fileName] = [];
            locations[loc.fileName].unshift(loc.textSpan);
        });
        return resolve({
            canRename: true,
            localizedErrorMessage: info.localizedErrorMessage,
            displayName: info.displayName,
            fullDisplayName: info.fullDisplayName,
            kind: info.kind,
            kindModifiers: info.kindModifiers,
            triggerSpan: info.triggerSpan,
            locations: locations
        });
    }
    else {
        return resolve({
            canRename: false
        });
    }
}
exports.getRenameInfo = getRenameInfo;
function getDefinitionsAtPosition(query) {
    var project = getProject(query.filePath);
    var definitions = project.languageService.getDefinitionAtPosition(query.filePath, query.position);
    var projectFileDirectory = project.configFile.projectFileDirectory;
    if (!definitions || !definitions.length)
        return resolve({ projectFileDirectory: projectFileDirectory, definitions: [] });
    return resolve({
        projectFileDirectory: projectFileDirectory,
        definitions: definitions.map(function (d) {
            var pos = project.languageServiceHost.getPositionFromIndex(d.fileName, d.textSpan.start);
            return {
                filePath: d.fileName,
                position: pos,
                span: d.textSpan,
            };
        })
    });
}
exports.getDefinitionsAtPosition = getDefinitionsAtPosition;
function getDoctorInfo(query) {
    var project = getProject(query.filePath);
    var filePath = query.filePath;
    var position = project.languageServiceHost.getIndexFromPosition(query.filePath, query.editorPosition);
    var defPromised = getDefinitionsAtPosition({ filePath: filePath, position: position });
    var quickInfoPromised = quickInfo({ filePath: filePath, position: position });
    return defPromised.then(function (defRes) {
        return quickInfoPromised.then(function (infoRes) {
            return getReferences({ filePath: filePath, position: position }).then(function (refRes) {
                return {
                    valid: !!defRes.definitions.length || infoRes.valid || !!refRes.references.length,
                    definitions: defRes.definitions,
                    quickInfo: infoRes.valid ? {
                        name: infoRes.name,
                        comment: infoRes.comment
                    } : null,
                    references: refRes.references
                };
            });
        });
    });
}
exports.getDoctorInfo = getDoctorInfo;
function getReferences(query) {
    var project = getProject(query.filePath);
    var languageService = project.languageService;
    var references = [];
    var refs = languageService.getReferencesAtPosition(query.filePath, query.position) || [];
    references = refs.map(function (r) {
        var res = project.languageServiceHost.getPositionFromTextSpanWithLinePreview(r.fileName, r.textSpan);
        return { filePath: r.fileName, position: res.position, span: r.textSpan, preview: res.preview };
    });
    return resolve({
        references: references
    });
}
exports.getReferences = getReferences;
var formatting = require("./modules/formatting");
function formatDocument(query) {
    var project = getProject(query.filePath);
    return resolve({ refactorings: formatting.formatDocument(project, query.filePath) });
}
exports.formatDocument = formatDocument;
function formatDocumentRange(query) {
    var project = getProject(query.filePath);
    return resolve({ refactorings: formatting.formatDocumentRange(project, query.filePath, query.from, query.to) });
}
exports.formatDocumentRange = formatDocumentRange;
