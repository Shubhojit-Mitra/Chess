"use strict";
var config = require('../webpack.config');
var path = require('path');
var fs = require('fs');
var utils = require("../common/utils");
var webpackDevServerPort = 8888;
exports.devtimeDetectionFile = __dirname + '/devtime.txt';
var bundleDevTimeProxy = utils.once(function () {
    var Webpack = require('webpack');
    var WebpackDevServer = require('webpack-dev-server');
    var notification = '[WDS]';
    var devConfig = Object.create(config);
    devConfig.devtool = 'eval';
    devConfig.entry = [
        require.resolve('webpack/hot/dev-server'),
        (require.resolve('webpack-dev-server/client') + "?http://localhost:" + webpackDevServerPort),
    ].concat(config.entry);
    devConfig.plugins = [new Webpack.HotModuleReplacementPlugin()];
    var compiler = Webpack(devConfig);
    compiler.plugin('compile', function () {
        console.log(notification + " bundling ..... ");
    });
    compiler.plugin('done', function (result) {
        console.log(notification + " bundled in " + (result.endTime - result.startTime) + " ms!");
    });
    var bundler = new WebpackDevServer(compiler, {
        publicPath: '/build/',
        hot: true,
        quiet: false,
        noInfo: true,
        stats: {
            colors: true
        }
    });
    bundler.listen(webpackDevServerPort, 'localhost', function () {
        console.log(notification + " server listening on port: " + webpackDevServerPort);
    });
    var httpProxy = require('http-proxy');
    var proxyServer = httpProxy.createProxyServer();
    return function (req, res) {
        proxyServer.web(req, res, {
            target: "http://localhost:" + webpackDevServerPort
        });
    };
});
function bundleDeploy() {
    var Webpack = require('webpack');
    var compiler = Webpack(config);
    compiler.run(function (err, stats) {
        if (err) {
            console.error('Failed to refresh bundle', err);
        }
        else {
            console.log('Refreshed bundle');
        }
    });
}
function addDevHeaders(res) {
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
}
function setup(app) {
    var outFile = path.join(config.output.path, config.output.filename);
    if (!fs.existsSync(outFile)) {
        bundleDeploy();
    }
    var devTime = fs.existsSync(exports.devtimeDetectionFile);
    if (devTime) {
        bundleDevTimeProxy();
    }
    app.all('/build/*', function (req, res, next) {
        if (devTime) {
            bundleDevTimeProxy()(req, res);
        }
        else {
            next();
        }
    });
    app.use('/', function (req, res, next) {
        if (devTime) {
            addDevHeaders(res);
        }
        next();
    });
    app.use('/dev', function (req, res, next) {
        addDevHeaders(res);
        devTime = true;
        fs.writeFileSync(exports.devtimeDetectionFile, 'If this file exists the server will start in dev mode');
        res.send('Hot Reload setup!');
    });
    app.use('/prod', function (req, res, next) {
        bundleDeploy();
        addDevHeaders(res);
        if (devTime) {
            devTime = false;
            fs.unlinkSync(exports.devtimeDetectionFile);
        }
        res.send('Using static bundled files');
    });
}
exports.setup = setup;
