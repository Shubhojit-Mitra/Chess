"use strict";
var sls = require("../socketLib/socketLibServer");
var contract = require("./socketContract");
var flm = require("../server/workers/fileListing/fileListingMaster");
var workingDir = require("../server/disk/workingDir");
var activeProject = require("../server/lang/activeProject");
var projectService = require("../server/lang/projectService");
var session = require("../server/disk/session");
var resolve = sls.resolve;
var fmc = require("../server/disk/fileModelCache");
var errorCache = require("../server/lang/errorsCache");
var Server;
(function (Server) {
    Server.echo = function (data, client) {
        console.log('Echo request received:', data);
        return client.increment({ num: data.num }).then(function (res) {
            return {
                text: data.text,
                num: res.num
            };
        });
    };
    Server.filePaths = function (data) {
        return flm.initialIndexComplete
            ? flm.filePathsCompleted.current().then(function (res) { return ({ filePaths: res.filePaths, completed: true }); })
            : flm.filePathsPartial.current().then(function (res) { return ({ filePaths: res.filePaths, completed: false }); });
    };
    Server.makeAbsolute = function (data) {
        return Promise.resolve({ filePath: workingDir.makeAbsolute(data.relativeFilePath) });
    };
    Server.openFile = function (data) {
        var file = fmc.getOrCreateOpenFile(data.filePath, true);
        return resolve({ contents: file.getContents(), saved: file.saved() });
    };
    Server.closeFile = function (data) {
        fmc.closeOpenFile(data.filePath);
        return resolve({});
    };
    Server.editFile = function (data) {
        var file = fmc.getOrCreateOpenFile(data.filePath);
        var saved = file.edit(data.edit).saved;
        return resolve({ saved: saved });
    };
    Server.saveFile = function (data) {
        var file = fmc.getOrCreateOpenFile(data.filePath);
        file.save();
        return resolve({});
    };
    Server.getFileStatus = function (data) {
        var file = fmc.getOrCreateOpenFile(data.filePath, true);
        return resolve({ saved: file.saved() });
    };
    Server.availableProjects = function (data) {
        return activeProject.availableProjects.current();
    };
    Server.getActiveProjectConfigDetails = function (data) {
        return activeProject.activeProjectConfigDetailsUpdated.current();
    };
    Server.setActiveProjectConfigDetails = function (data) {
        activeProject.setActiveProjectConfigDetails(data);
        return resolve({});
    };
    Server.isFilePathInActiveProject = function (data) {
        var inActiveProject = !!activeProject.GetProject.ifCurrent(data.filePath);
        return resolve({ inActiveProject: inActiveProject });
    };
    Server.setOpenUITabs = function (data) {
        session.setOpenUITabs(data.openTabs);
        return resolve({});
    };
    Server.getOpenUITabs = function (data) {
        return resolve(session.getOpenUITabs());
    };
    Server.getFilePathsInActiveProject = function (data) {
        return activeProject.activeProjectConfigDetailsUpdated
            .current()
            .then(function () { return ({ filePaths: activeProject.GetProject.allFilePaths() }); });
    };
    Server.getErrors = function (data) {
        return resolve(errorCache.getErrors());
    };
    Server.getCompletionsAtPosition = projectService.getCompletionsAtPosition;
    Server.quickInfo = projectService.quickInfo;
    Server.getRenameInfo = projectService.getRenameInfo;
    Server.getDefinitionsAtPosition = projectService.getDefinitionsAtPosition;
    Server.getDoctorInfo = projectService.getDoctorInfo;
    Server.getReferences = projectService.getReferences;
    Server.formatDocument = projectService.formatDocument;
    Server.formatDocumentRange = projectService.formatDocumentRange;
})(Server || (Server = {}));
var _checkTypes = Server;
exports.cast = contract.cast;
function register(app) {
    var runResult = sls.run({
        app: app,
        serverImplementation: Server,
        clientContract: contract.client,
        cast: contract.cast
    });
    exports.cast = runResult.cast;
    fmc.savedFileChangedOnDisk.pipe(exports.cast.savedFileChangedOnDisk);
    fmc.didEdit.pipe(exports.cast.didEdit);
    fmc.didStatusChange.pipe(exports.cast.didStatusChange);
    flm.filePathsCompleted.pipe(exports.cast.filePathsCompleted);
    flm.filePathsPartial.pipe(exports.cast.filePathsPartial);
    errorCache.errorsUpdated.pipe(exports.cast.errorsUpdated);
    activeProject.availableProjects.pipe(exports.cast.availableProjectsUpdated);
    activeProject.activeProjectConfigDetailsUpdated.pipe(exports.cast.activeProjectConfigDetailsUpdated);
}
exports.register = register;
